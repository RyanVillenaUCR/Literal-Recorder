
LiteralRecorder1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  00001168  000011fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800342  00800342  0000143e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c1f  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b0  00000000  00000000  00003245  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000109b  00000000  00000000  000035f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000504  00000000  00000000  00004690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008e0  00000000  00000000  00004b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001983  00000000  00000000  00005474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  00006df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	aa c1       	rjmp	.+852    	; 0x38a <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e6       	ldi	r30, 0x68	; 104
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 34       	cpi	r26, 0x42	; 66
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a2 e4       	ldi	r26, 0x42	; 66
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3d       	cpi	r26, 0xD2	; 210
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f3 d5       	rcall	.+3046   	; 0xcaa <main>
      c4:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <getJoystickDiscrete>:
void produceSound(unsigned char indexOfNote, double vibrato) {
    
    if (indexOfNote == SHH_INDEX) {
        set_PWM(0);
    } else {
        set_PWM(frequencies[indexOfNote] + vibrato);
      ca:	80 93 7c 00 	sts	0x007C, r24
      ce:	80 91 78 00 	lds	r24, 0x0078
      d2:	90 91 79 00 	lds	r25, 0x0079
      d6:	9c 01       	movw	r18, r24
      d8:	2e 5c       	subi	r18, 0xCE	; 206
      da:	31 40       	sbci	r19, 0x01	; 1
      dc:	25 36       	cpi	r18, 0x65	; 101
      de:	31 05       	cpc	r19, r1
      e0:	a0 f0       	brcs	.+40     	; 0x10a <getJoystickDiscrete+0x40>
      e2:	26 50       	subi	r18, 0x06	; 6
      e4:	3f 4f       	sbci	r19, 0xFF	; 255
      e6:	2a 3f       	cpi	r18, 0xFA	; 250
      e8:	31 05       	cpc	r19, r1
      ea:	88 f0       	brcs	.+34     	; 0x10e <getJoystickDiscrete+0x44>
      ec:	84 3d       	cpi	r24, 0xD4	; 212
      ee:	91 05       	cpc	r25, r1
      f0:	80 f0       	brcs	.+32     	; 0x112 <getJoystickDiscrete+0x48>
      f2:	2f 55       	subi	r18, 0x5F	; 95
      f4:	31 40       	sbci	r19, 0x01	; 1
      f6:	2a 3f       	cpi	r18, 0xFA	; 250
      f8:	31 05       	cpc	r19, r1
      fa:	68 f0       	brcs	.+26     	; 0x116 <getJoystickDiscrete+0x4c>
      fc:	8d 52       	subi	r24, 0x2D	; 45
      fe:	93 40       	sbci	r25, 0x03	; 3
     100:	83 3d       	cpi	r24, 0xD3	; 211
     102:	91 05       	cpc	r25, r1
     104:	50 f4       	brcc	.+20     	; 0x11a <getJoystickDiscrete+0x50>
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	08 95       	ret
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret
     10e:	84 e0       	ldi	r24, 0x04	; 4
     110:	08 95       	ret
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	08 95       	ret
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	08 95       	ret
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	08 95       	ret

0000011e <delay_ms>:
     11e:	18 16       	cp	r1, r24
     120:	19 06       	cpc	r1, r25
     122:	9c f4       	brge	.+38     	; 0x14a <delay_ms+0x2c>
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	77 e0       	ldi	r23, 0x07	; 7
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	0b c0       	rjmp	.+22     	; 0x144 <delay_ms+0x26>
     12e:	00 00       	nop
     130:	21 50       	subi	r18, 0x01	; 1
     132:	31 09       	sbc	r19, r1
     134:	21 15       	cp	r18, r1
     136:	31 05       	cpc	r19, r1
     138:	d1 f7       	brne	.-12     	; 0x12e <delay_ms+0x10>
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	48 17       	cp	r20, r24
     140:	59 07       	cpc	r21, r25
     142:	19 f0       	breq	.+6      	; 0x14a <delay_ms+0x2c>
     144:	27 2f       	mov	r18, r23
     146:	36 2f       	mov	r19, r22
     148:	f2 cf       	rjmp	.-28     	; 0x12e <delay_ms+0x10>
     14a:	08 95       	ret

0000014c <LCD_WriteCommand>:
     14c:	5e 98       	cbi	0x0b, 6	; 11
     14e:	88 b9       	out	0x08, r24	; 8
     150:	5f 9a       	sbi	0x0b, 7	; 11
     152:	00 00       	nop
     154:	5f 98       	cbi	0x0b, 7	; 11
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	e1 cf       	rjmp	.-62     	; 0x11e <delay_ms>
     15c:	08 95       	ret

0000015e <LCD_init>:
     15e:	84 e6       	ldi	r24, 0x64	; 100
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	dd df       	rcall	.-70     	; 0x11e <delay_ms>
     164:	88 e3       	ldi	r24, 0x38	; 56
     166:	f2 df       	rcall	.-28     	; 0x14c <LCD_WriteCommand>
     168:	86 e0       	ldi	r24, 0x06	; 6
     16a:	f0 df       	rcall	.-32     	; 0x14c <LCD_WriteCommand>
     16c:	8f e0       	ldi	r24, 0x0F	; 15
     16e:	ee df       	rcall	.-36     	; 0x14c <LCD_WriteCommand>
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	ec df       	rcall	.-40     	; 0x14c <LCD_WriteCommand>
     174:	8a e0       	ldi	r24, 0x0A	; 10
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	d2 cf       	rjmp	.-92     	; 0x11e <delay_ms>
     17a:	08 95       	ret

0000017c <LCD_WriteData>:
     17c:	5e 9a       	sbi	0x0b, 6	; 11
     17e:	88 b9       	out	0x08, r24	; 8
     180:	5f 9a       	sbi	0x0b, 7	; 11
     182:	00 00       	nop
     184:	5f 98       	cbi	0x0b, 7	; 11
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	c9 cf       	rjmp	.-110    	; 0x11e <delay_ms>
     18c:	08 95       	ret

0000018e <LCD_Cursor>:
     18e:	81 31       	cpi	r24, 0x11	; 17
     190:	18 f4       	brcc	.+6      	; 0x198 <LCD_Cursor+0xa>
     192:	81 58       	subi	r24, 0x81	; 129
     194:	db cf       	rjmp	.-74     	; 0x14c <LCD_WriteCommand>
     196:	08 95       	ret
     198:	81 55       	subi	r24, 0x51	; 81
     19a:	d8 cf       	rjmp	.-80     	; 0x14c <LCD_WriteCommand>
     19c:	08 95       	ret

0000019e <LCD_ClearLine>:
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	d8 2f       	mov	r29, r24
     1a4:	c1 e0       	ldi	r28, 0x01	; 1
     1a6:	dd 23       	and	r29, r29
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <LCD_ClearLine+0x12>
     1aa:	8c 2f       	mov	r24, r28
     1ac:	f0 df       	rcall	.-32     	; 0x18e <LCD_Cursor>
     1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <LCD_ClearLine+0x18>
     1b0:	80 e1       	ldi	r24, 0x10	; 16
     1b2:	8c 0f       	add	r24, r28
     1b4:	ec df       	rcall	.-40     	; 0x18e <LCD_Cursor>
     1b6:	80 e2       	ldi	r24, 0x20	; 32
     1b8:	e1 df       	rcall	.-62     	; 0x17c <LCD_WriteData>
     1ba:	cf 5f       	subi	r28, 0xFF	; 255
     1bc:	c1 31       	cpi	r28, 0x11	; 17
     1be:	99 f7       	brne	.-26     	; 0x1a6 <LCD_ClearLine+0x8>
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <LCD_DisplayLine>:
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	e8 2e       	mov	r14, r24
     1d4:	eb 01       	movw	r28, r22
     1d6:	e3 df       	rcall	.-58     	; 0x19e <LCD_ClearLine>
     1d8:	88 81       	ld	r24, Y
     1da:	88 23       	and	r24, r24
     1dc:	c9 f0       	breq	.+50     	; 0x210 <LCD_DisplayLine+0x4a>
     1de:	8e 01       	movw	r16, r28
     1e0:	0f 5f       	subi	r16, 0xFF	; 255
     1e2:	1f 4f       	sbci	r17, 0xFF	; 255
     1e4:	ff 24       	eor	r15, r15
     1e6:	f3 94       	inc	r15
     1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <LCD_DisplayLine+0x30>
     1ea:	e8 01       	movw	r28, r16
     1ec:	0f 5f       	subi	r16, 0xFF	; 255
     1ee:	1f 4f       	sbci	r17, 0xFF	; 255
     1f0:	98 81       	ld	r25, Y
     1f2:	99 23       	and	r25, r25
     1f4:	69 f0       	breq	.+26     	; 0x210 <LCD_DisplayLine+0x4a>
     1f6:	e1 10       	cpse	r14, r1
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <LCD_DisplayLine+0x3a>
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	8f 0d       	add	r24, r15
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <LCD_DisplayLine+0x3c>
     200:	8f 2d       	mov	r24, r15
     202:	c5 df       	rcall	.-118    	; 0x18e <LCD_Cursor>
     204:	88 81       	ld	r24, Y
     206:	ba df       	rcall	.-140    	; 0x17c <LCD_WriteData>
     208:	f3 94       	inc	r15
     20a:	81 e1       	ldi	r24, 0x11	; 17
     20c:	f8 12       	cpse	r15, r24
     20e:	ed cf       	rjmp	.-38     	; 0x1ea <LCD_DisplayLine+0x24>
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	08 95       	ret

0000021e <LCD_DisplayDigits>:
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	c6 2f       	mov	r28, r22
     224:	81 11       	cpse	r24, r1
     226:	30 c0       	rjmp	.+96     	; 0x288 <LCD_DisplayDigits+0x6a>
     228:	12 c0       	rjmp	.+36     	; 0x24e <LCD_DisplayDigits+0x30>
     22a:	b1 df       	rcall	.-158    	; 0x18e <LCD_Cursor>
     22c:	8d ec       	ldi	r24, 0xCD	; 205
     22e:	c8 9f       	mul	r28, r24
     230:	81 2d       	mov	r24, r1
     232:	11 24       	eor	r1, r1
     234:	86 95       	lsr	r24
     236:	86 95       	lsr	r24
     238:	86 95       	lsr	r24
     23a:	88 0f       	add	r24, r24
     23c:	98 2f       	mov	r25, r24
     23e:	99 0f       	add	r25, r25
     240:	99 0f       	add	r25, r25
     242:	89 0f       	add	r24, r25
     244:	c8 1b       	sub	r28, r24
     246:	8c 2f       	mov	r24, r28
     248:	80 5d       	subi	r24, 0xD0	; 208
     24a:	98 df       	rcall	.-208    	; 0x17c <LCD_WriteData>
     24c:	3a c0       	rjmp	.+116    	; 0x2c2 <LCD_DisplayDigits+0xa4>
     24e:	81 e1       	ldi	r24, 0x11	; 17
     250:	9e df       	rcall	.-196    	; 0x18e <LCD_Cursor>
     252:	d9 e2       	ldi	r29, 0x29	; 41
     254:	cd 9f       	mul	r28, r29
     256:	d1 2d       	mov	r29, r1
     258:	11 24       	eor	r1, r1
     25a:	d2 95       	swap	r29
     25c:	df 70       	andi	r29, 0x0F	; 15
     25e:	80 e3       	ldi	r24, 0x30	; 48
     260:	8d 0f       	add	r24, r29
     262:	8c df       	rcall	.-232    	; 0x17c <LCD_WriteData>
     264:	82 e1       	ldi	r24, 0x12	; 18
     266:	93 df       	rcall	.-218    	; 0x18e <LCD_Cursor>
     268:	9c 2f       	mov	r25, r28
     26a:	84 e6       	ldi	r24, 0x64	; 100
     26c:	d8 9f       	mul	r29, r24
     26e:	90 19       	sub	r25, r0
     270:	11 24       	eor	r1, r1
     272:	8d ec       	ldi	r24, 0xCD	; 205
     274:	98 9f       	mul	r25, r24
     276:	81 2d       	mov	r24, r1
     278:	11 24       	eor	r1, r1
     27a:	86 95       	lsr	r24
     27c:	86 95       	lsr	r24
     27e:	86 95       	lsr	r24
     280:	80 5d       	subi	r24, 0xD0	; 208
     282:	7c df       	rcall	.-264    	; 0x17c <LCD_WriteData>
     284:	83 e1       	ldi	r24, 0x13	; 19
     286:	d1 cf       	rjmp	.-94     	; 0x22a <LCD_DisplayDigits+0xc>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	81 df       	rcall	.-254    	; 0x18e <LCD_Cursor>
     28c:	d9 e2       	ldi	r29, 0x29	; 41
     28e:	cd 9f       	mul	r28, r29
     290:	d1 2d       	mov	r29, r1
     292:	11 24       	eor	r1, r1
     294:	d2 95       	swap	r29
     296:	df 70       	andi	r29, 0x0F	; 15
     298:	80 e3       	ldi	r24, 0x30	; 48
     29a:	8d 0f       	add	r24, r29
     29c:	6f df       	rcall	.-290    	; 0x17c <LCD_WriteData>
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	76 df       	rcall	.-276    	; 0x18e <LCD_Cursor>
     2a2:	9c 2f       	mov	r25, r28
     2a4:	84 e6       	ldi	r24, 0x64	; 100
     2a6:	d8 9f       	mul	r29, r24
     2a8:	90 19       	sub	r25, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	8d ec       	ldi	r24, 0xCD	; 205
     2ae:	98 9f       	mul	r25, r24
     2b0:	81 2d       	mov	r24, r1
     2b2:	11 24       	eor	r1, r1
     2b4:	86 95       	lsr	r24
     2b6:	86 95       	lsr	r24
     2b8:	86 95       	lsr	r24
     2ba:	80 5d       	subi	r24, 0xD0	; 208
     2bc:	5f df       	rcall	.-322    	; 0x17c <LCD_WriteData>
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	b4 cf       	rjmp	.-152    	; 0x22a <LCD_DisplayDigits+0xc>
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <LCDBuildChar>:
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	06 2f       	mov	r16, r22
     2d2:	17 2f       	mov	r17, r23
     2d4:	88 30       	cpi	r24, 0x08	; 8
     2d6:	60 f4       	brcc	.+24     	; 0x2f0 <LCDBuildChar+0x28>
     2d8:	88 0f       	add	r24, r24
     2da:	88 0f       	add	r24, r24
     2dc:	88 0f       	add	r24, r24
     2de:	80 5c       	subi	r24, 0xC0	; 192
     2e0:	35 df       	rcall	.-406    	; 0x14c <LCD_WriteCommand>
     2e2:	c0 2f       	mov	r28, r16
     2e4:	d1 2f       	mov	r29, r17
     2e6:	18 e0       	ldi	r17, 0x08	; 8
     2e8:	89 91       	ld	r24, Y+
     2ea:	48 df       	rcall	.-368    	; 0x17c <LCD_WriteData>
     2ec:	11 50       	subi	r17, 0x01	; 1
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <LCDBuildChar+0x20>
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	2c df       	rcall	.-424    	; 0x14c <LCD_WriteCommand>
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <LCD_WriteSubstring>:
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	f8 2e       	mov	r15, r24
     30a:	eb 01       	movw	r28, r22
     30c:	8b 01       	movw	r16, r22
     30e:	04 0f       	add	r16, r20
     310:	15 1f       	adc	r17, r21
     312:	60 17       	cp	r22, r16
     314:	71 07       	cpc	r23, r17
     316:	78 f4       	brcc	.+30     	; 0x336 <LCD_WriteSubstring+0x38>
     318:	88 81       	ld	r24, Y
     31a:	81 11       	cpse	r24, r1
     31c:	04 c0       	rjmp	.+8      	; 0x326 <LCD_WriteSubstring+0x28>
     31e:	0b c0       	rjmp	.+22     	; 0x336 <LCD_WriteSubstring+0x38>
     320:	88 81       	ld	r24, Y
     322:	88 23       	and	r24, r24
     324:	41 f0       	breq	.+16     	; 0x336 <LCD_WriteSubstring+0x38>
     326:	8f 2d       	mov	r24, r15
     328:	32 df       	rcall	.-412    	; 0x18e <LCD_Cursor>
     32a:	89 91       	ld	r24, Y+
     32c:	27 df       	rcall	.-434    	; 0x17c <LCD_WriteData>
     32e:	f3 94       	inc	r15
     330:	c0 17       	cp	r28, r16
     332:	d1 07       	cpc	r29, r17
     334:	a9 f7       	brne	.-22     	; 0x320 <LCD_WriteSubstring+0x22>
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	08 95       	ret

00000342 <TimerOn>:
     342:	8b e0       	ldi	r24, 0x0B	; 11
     344:	80 93 81 00 	sts	0x0081, r24
     348:	8d e7       	ldi	r24, 0x7D	; 125
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	90 93 89 00 	sts	0x0089, r25
     350:	80 93 88 00 	sts	0x0088, r24
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	80 93 6f 00 	sts	0x006F, r24
     35a:	10 92 85 00 	sts	0x0085, r1
     35e:	10 92 84 00 	sts	0x0084, r1
     362:	80 91 44 01 	lds	r24, 0x0144
     366:	90 91 45 01 	lds	r25, 0x0145
     36a:	a0 91 46 01 	lds	r26, 0x0146
     36e:	b0 91 47 01 	lds	r27, 0x0147
     372:	80 93 4b 03 	sts	0x034B, r24
     376:	90 93 4c 03 	sts	0x034C, r25
     37a:	a0 93 4d 03 	sts	0x034D, r26
     37e:	b0 93 4e 03 	sts	0x034E, r27
     382:	8f b7       	in	r24, 0x3f	; 63
     384:	80 68       	ori	r24, 0x80	; 128
     386:	8f bf       	out	0x3f, r24	; 63
     388:	08 95       	ret

0000038a <__vector_13>:
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	8f 93       	push	r24
     396:	9f 93       	push	r25
     398:	af 93       	push	r26
     39a:	bf 93       	push	r27
     39c:	80 91 4b 03 	lds	r24, 0x034B
     3a0:	90 91 4c 03 	lds	r25, 0x034C
     3a4:	a0 91 4d 03 	lds	r26, 0x034D
     3a8:	b0 91 4e 03 	lds	r27, 0x034E
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	a1 09       	sbc	r26, r1
     3b0:	b1 09       	sbc	r27, r1
     3b2:	80 93 4b 03 	sts	0x034B, r24
     3b6:	90 93 4c 03 	sts	0x034C, r25
     3ba:	a0 93 4d 03 	sts	0x034D, r26
     3be:	b0 93 4e 03 	sts	0x034E, r27
     3c2:	89 2b       	or	r24, r25
     3c4:	8a 2b       	or	r24, r26
     3c6:	8b 2b       	or	r24, r27
     3c8:	99 f4       	brne	.+38     	; 0x3f0 <__vector_13+0x66>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 4f 03 	sts	0x034F, r24
     3d0:	80 91 44 01 	lds	r24, 0x0144
     3d4:	90 91 45 01 	lds	r25, 0x0145
     3d8:	a0 91 46 01 	lds	r26, 0x0146
     3dc:	b0 91 47 01 	lds	r27, 0x0147
     3e0:	80 93 4b 03 	sts	0x034B, r24
     3e4:	90 93 4c 03 	sts	0x034C, r25
     3e8:	a0 93 4d 03 	sts	0x034D, r26
     3ec:	b0 93 4e 03 	sts	0x034E, r27
     3f0:	bf 91       	pop	r27
     3f2:	af 91       	pop	r26
     3f4:	9f 91       	pop	r25
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <set_PWM>:
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	6b 01       	movw	r12, r22
     40c:	7c 01       	movw	r14, r24
     40e:	20 91 47 03 	lds	r18, 0x0347
     412:	30 91 48 03 	lds	r19, 0x0348
     416:	40 91 49 03 	lds	r20, 0x0349
     41a:	50 91 4a 03 	lds	r21, 0x034A
     41e:	b4 d4       	rcall	.+2408   	; 0xd88 <__cmpsf2>
     420:	88 23       	and	r24, r24
     422:	09 f4       	brne	.+2      	; 0x426 <set_PWM+0x24>
     424:	52 c0       	rjmp	.+164    	; 0x4ca <set_PWM+0xc8>
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	c7 01       	movw	r24, r14
     42e:	b6 01       	movw	r22, r12
     430:	ab d4       	rcall	.+2390   	; 0xd88 <__cmpsf2>
     432:	81 11       	cpse	r24, r1
     434:	06 c0       	rjmp	.+12     	; 0x442 <set_PWM+0x40>
     436:	e1 e9       	ldi	r30, 0x91	; 145
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 70       	andi	r24, 0x08	; 8
     43e:	80 83       	st	Z, r24
     440:	05 c0       	rjmp	.+10     	; 0x44c <set_PWM+0x4a>
     442:	e1 e9       	ldi	r30, 0x91	; 145
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	83 60       	ori	r24, 0x03	; 3
     44a:	80 83       	st	Z, r24
     44c:	28 e5       	ldi	r18, 0x58	; 88
     44e:	39 e3       	ldi	r19, 0x39	; 57
     450:	44 e7       	ldi	r20, 0x74	; 116
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	97 d4       	rcall	.+2350   	; 0xd88 <__cmpsf2>
     45a:	88 23       	and	r24, r24
     45c:	3c f4       	brge	.+14     	; 0x46c <set_PWM+0x6a>
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	9f ef       	ldi	r25, 0xFF	; 255
     462:	90 93 99 00 	sts	0x0099, r25
     466:	80 93 98 00 	sts	0x0098, r24
     46a:	23 c0       	rjmp	.+70     	; 0x4b2 <set_PWM+0xb0>
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	34 e2       	ldi	r19, 0x24	; 36
     470:	44 ef       	ldi	r20, 0xF4	; 244
     472:	56 e4       	ldi	r21, 0x46	; 70
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	d6 d5       	rcall	.+2988   	; 0x1026 <__gesf2>
     47a:	18 16       	cp	r1, r24
     47c:	2c f4       	brge	.+10     	; 0x488 <set_PWM+0x86>
     47e:	10 92 99 00 	sts	0x0099, r1
     482:	10 92 98 00 	sts	0x0098, r1
     486:	15 c0       	rjmp	.+42     	; 0x4b2 <set_PWM+0xb0>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	53 e4       	ldi	r21, 0x43	; 67
     490:	c7 01       	movw	r24, r14
     492:	b6 01       	movw	r22, r12
     494:	cc d5       	rcall	.+2968   	; 0x102e <__mulsf3>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	74 e2       	ldi	r23, 0x24	; 36
     49e:	84 ef       	ldi	r24, 0xF4	; 244
     4a0:	9a e4       	ldi	r25, 0x4A	; 74
     4a2:	76 d4       	rcall	.+2284   	; 0xd90 <__divsf3>
     4a4:	dd d4       	rcall	.+2490   	; 0xe60 <__fixsfsi>
     4a6:	61 50       	subi	r22, 0x01	; 1
     4a8:	71 09       	sbc	r23, r1
     4aa:	70 93 99 00 	sts	0x0099, r23
     4ae:	60 93 98 00 	sts	0x0098, r22
     4b2:	10 92 95 00 	sts	0x0095, r1
     4b6:	10 92 94 00 	sts	0x0094, r1
     4ba:	c0 92 47 03 	sts	0x0347, r12
     4be:	d0 92 48 03 	sts	0x0348, r13
     4c2:	e0 92 49 03 	sts	0x0349, r14
     4c6:	f0 92 4a 03 	sts	0x034A, r15
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <tick_Playback>:
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	c8 2f       	mov	r28, r24
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	39 f0       	breq	.+14     	; 0x4ec <tick_Playback+0x18>
     4de:	18 f0       	brcs	.+6      	; 0x4e6 <tick_Playback+0x12>
     4e0:	82 30       	cpi	r24, 0x02	; 2
     4e2:	91 f0       	breq	.+36     	; 0x508 <tick_Playback+0x34>
     4e4:	1c c0       	rjmp	.+56     	; 0x51e <tick_Playback+0x4a>
     4e6:	10 92 43 03 	sts	0x0343, r1
     4ea:	34 c0       	rjmp	.+104    	; 0x554 <tick_Playback+0x80>
     4ec:	80 91 cd 03 	lds	r24, 0x03CD
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	81 f5       	brne	.+96     	; 0x554 <tick_Playback+0x80>
     4f4:	10 92 43 03 	sts	0x0343, r1
     4f8:	40 e4       	ldi	r20, 0x40	; 64
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	6c e0       	ldi	r22, 0x0C	; 12
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	8c e8       	ldi	r24, 0x8C	; 140
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	fe d5       	rcall	.+3068   	; 0x1102 <__eerd_block_m1284>
     506:	24 c0       	rjmp	.+72     	; 0x550 <tick_Playback+0x7c>
     508:	80 91 43 03 	lds	r24, 0x0343
     50c:	80 34       	cpi	r24, 0x40	; 64
     50e:	00 f1       	brcs	.+64     	; 0x550 <tick_Playback+0x7c>
     510:	10 92 cc 03 	sts	0x03CC, r1
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	cb 01       	movw	r24, r22
     51a:	73 df       	rcall	.-282    	; 0x402 <set_PWM>
     51c:	1b c0       	rjmp	.+54     	; 0x554 <tick_Playback+0x80>
     51e:	82 30       	cpi	r24, 0x02	; 2
     520:	d1 f4       	brne	.+52     	; 0x556 <tick_Playback+0x82>
     522:	d0 91 43 03 	lds	r29, 0x0343
     526:	ed 2f       	mov	r30, r29
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	e4 57       	subi	r30, 0x74	; 116
     52c:	fc 4f       	sbci	r31, 0xFC	; 252
     52e:	e0 81       	ld	r30, Z
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	ee 0f       	add	r30, r30
     534:	ff 1f       	adc	r31, r31
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	e6 55       	subi	r30, 0x56	; 86
     53c:	fd 4f       	sbci	r31, 0xFD	; 253
     53e:	60 81       	ld	r22, Z
     540:	71 81       	ldd	r23, Z+1	; 0x01
     542:	82 81       	ldd	r24, Z+2	; 0x02
     544:	93 81       	ldd	r25, Z+3	; 0x03
     546:	5d df       	rcall	.-326    	; 0x402 <set_PWM>
     548:	df 5f       	subi	r29, 0xFF	; 255
     54a:	d0 93 43 03 	sts	0x0343, r29
     54e:	03 c0       	rjmp	.+6      	; 0x556 <tick_Playback+0x82>
     550:	c2 e0       	ldi	r28, 0x02	; 2
     552:	e7 cf       	rjmp	.-50     	; 0x522 <tick_Playback+0x4e>
     554:	c1 e0       	ldi	r28, 0x01	; 1
     556:	8c 2f       	mov	r24, r28
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <PWM_on>:
     55e:	80 e4       	ldi	r24, 0x40	; 64
     560:	80 93 90 00 	sts	0x0090, r24
     564:	8b e0       	ldi	r24, 0x0B	; 11
     566:	80 93 91 00 	sts	0x0091, r24
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	cb 01       	movw	r24, r22
     570:	48 cf       	rjmp	.-368    	; 0x402 <set_PWM>
     572:	08 95       	ret

00000574 <ADC_init>:
     574:	ea e7       	ldi	r30, 0x7A	; 122
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	80 6e       	ori	r24, 0xE0	; 224
     57c:	80 83       	st	Z, r24
     57e:	08 95       	ret

00000580 <buildSymbols>:
     580:	6c e9       	ldi	r22, 0x9C	; 156
     582:	72 e0       	ldi	r23, 0x02	; 2
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	a0 de       	rcall	.-704    	; 0x2c8 <LCDBuildChar>
     588:	63 ea       	ldi	r22, 0xA3	; 163
     58a:	72 e0       	ldi	r23, 0x02	; 2
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	9c ce       	rjmp	.-712    	; 0x2c8 <LCDBuildChar>
     590:	08 95       	ret

00000592 <safeInc_note>:
     592:	28 2f       	mov	r18, r24
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	21 32       	cpi	r18, 0x21	; 33
     59c:	31 05       	cpc	r19, r1
     59e:	0c f4       	brge	.+2      	; 0x5a2 <safeInc_note+0x10>
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	08 95       	ret

000005a4 <safeDec_note>:
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	31 09       	sbc	r19, r1
     5ac:	12 16       	cp	r1, r18
     5ae:	13 06       	cpc	r1, r19
     5b0:	0c f4       	brge	.+2      	; 0x5b4 <safeDec_note+0x10>
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	08 95       	ret

000005b6 <modifyIndexWith_joyInput>:
     5b6:	62 30       	cpi	r22, 0x02	; 2
     5b8:	61 f0       	breq	.+24     	; 0x5d2 <modifyIndexWith_joyInput+0x1c>
     5ba:	18 f4       	brcc	.+6      	; 0x5c2 <modifyIndexWith_joyInput+0xc>
     5bc:	61 30       	cpi	r22, 0x01	; 1
     5be:	39 f0       	breq	.+14     	; 0x5ce <modifyIndexWith_joyInput+0x18>
     5c0:	08 95       	ret
     5c2:	63 30       	cpi	r22, 0x03	; 3
     5c4:	19 f0       	breq	.+6      	; 0x5cc <modifyIndexWith_joyInput+0x16>
     5c6:	64 30       	cpi	r22, 0x04	; 4
     5c8:	29 f0       	breq	.+10     	; 0x5d4 <modifyIndexWith_joyInput+0x1e>
     5ca:	08 95       	ret
     5cc:	e2 df       	rcall	.-60     	; 0x592 <safeInc_note>
     5ce:	e1 cf       	rjmp	.-62     	; 0x592 <safeInc_note>
     5d0:	08 95       	ret
     5d2:	e8 df       	rcall	.-48     	; 0x5a4 <safeDec_note>
     5d4:	e7 cf       	rjmp	.-50     	; 0x5a4 <safeDec_note>
     5d6:	08 95       	ret

000005d8 <getNote>:
     5d8:	88 23       	and	r24, r24
     5da:	49 f0       	breq	.+18     	; 0x5ee <getNote+0x16>
     5dc:	e9 b1       	in	r30, 0x09	; 9
     5de:	e0 95       	com	r30
     5e0:	ef 70       	andi	r30, 0x0F	; 15
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	ee 5c       	subi	r30, 0xCE	; 206
     5e6:	fc 4f       	sbci	r31, 0xFC	; 252
     5e8:	80 81       	ld	r24, Z
     5ea:	e5 cf       	rjmp	.-54     	; 0x5b6 <modifyIndexWith_joyInput>
     5ec:	08 95       	ret
     5ee:	81 e2       	ldi	r24, 0x21	; 33
     5f0:	08 95       	ret

000005f2 <getVibrato>:
     5f2:	8f 92       	push	r8
     5f4:	9f 92       	push	r9
     5f6:	af 92       	push	r10
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	81 32       	cpi	r24, 0x21	; 33
     608:	09 f4       	brne	.+2      	; 0x60c <getVibrato+0x1a>
     60a:	5b c0       	rjmp	.+182    	; 0x6c2 <getVibrato+0xd0>
     60c:	72 50       	subi	r23, 0x02	; 2
     60e:	c8 2f       	mov	r28, r24
     610:	d0 e0       	ldi	r29, 0x00	; 0
     612:	fe 01       	movw	r30, r28
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	e6 55       	subi	r30, 0x56	; 86
     61e:	fd 4f       	sbci	r31, 0xFD	; 253
     620:	c0 80       	ld	r12, Z
     622:	d1 80       	ldd	r13, Z+1	; 0x01
     624:	e2 80       	ldd	r14, Z+2	; 0x02
     626:	f3 80       	ldd	r15, Z+3	; 0x03
     628:	16 16       	cp	r1, r22
     62a:	17 06       	cpc	r1, r23
     62c:	24 f5       	brge	.+72     	; 0x676 <getVibrato+0x84>
     62e:	88 27       	eor	r24, r24
     630:	77 fd       	sbrc	r23, 7
     632:	80 95       	com	r24
     634:	98 2f       	mov	r25, r24
     636:	47 d4       	rcall	.+2190   	; 0xec6 <__floatsisf>
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	5b e3       	ldi	r21, 0x3B	; 59
     640:	f6 d4       	rcall	.+2540   	; 0x102e <__mulsf3>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
     646:	cc 0f       	add	r28, r28
     648:	dd 1f       	adc	r29, r29
     64a:	cc 0f       	add	r28, r28
     64c:	dd 1f       	adc	r29, r29
     64e:	c2 55       	subi	r28, 0x52	; 82
     650:	dd 4f       	sbci	r29, 0xFD	; 253
     652:	a7 01       	movw	r20, r14
     654:	96 01       	movw	r18, r12
     656:	68 81       	ld	r22, Y
     658:	79 81       	ldd	r23, Y+1	; 0x01
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	9b 81       	ldd	r25, Y+3	; 0x03
     65e:	2f d3       	rcall	.+1630   	; 0xcbe <__subsf3>
     660:	9b 01       	movw	r18, r22
     662:	ac 01       	movw	r20, r24
     664:	c5 01       	movw	r24, r10
     666:	b4 01       	movw	r22, r8
     668:	e2 d4       	rcall	.+2500   	; 0x102e <__mulsf3>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e8       	ldi	r20, 0x80	; 128
     670:	5e e3       	ldi	r21, 0x3E	; 62
     672:	dd d4       	rcall	.+2490   	; 0x102e <__mulsf3>
     674:	2d c0       	rjmp	.+90     	; 0x6d0 <getVibrato+0xde>
     676:	77 23       	and	r23, r23
     678:	44 f5       	brge	.+80     	; 0x6ca <getVibrato+0xd8>
     67a:	88 27       	eor	r24, r24
     67c:	77 fd       	sbrc	r23, 7
     67e:	80 95       	com	r24
     680:	98 2f       	mov	r25, r24
     682:	21 d4       	rcall	.+2114   	; 0xec6 <__floatsisf>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	5b e3       	ldi	r21, 0x3B	; 59
     68c:	d0 d4       	rcall	.+2464   	; 0x102e <__mulsf3>
     68e:	4b 01       	movw	r8, r22
     690:	5c 01       	movw	r10, r24
     692:	cc 0f       	add	r28, r28
     694:	dd 1f       	adc	r29, r29
     696:	cc 0f       	add	r28, r28
     698:	dd 1f       	adc	r29, r29
     69a:	ca 55       	subi	r28, 0x5A	; 90
     69c:	dd 4f       	sbci	r29, 0xFD	; 253
     69e:	28 81       	ld	r18, Y
     6a0:	39 81       	ldd	r19, Y+1	; 0x01
     6a2:	4a 81       	ldd	r20, Y+2	; 0x02
     6a4:	5b 81       	ldd	r21, Y+3	; 0x03
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	09 d3       	rcall	.+1554   	; 0xcbe <__subsf3>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	c5 01       	movw	r24, r10
     6b2:	b4 01       	movw	r22, r8
     6b4:	bc d4       	rcall	.+2424   	; 0x102e <__mulsf3>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e8       	ldi	r20, 0x80	; 128
     6bc:	5e e3       	ldi	r21, 0x3E	; 62
     6be:	b7 d4       	rcall	.+2414   	; 0x102e <__mulsf3>
     6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <getVibrato+0xde>
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	cb 01       	movw	r24, r22
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <getVibrato+0xde>
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	cb 01       	movw	r24, r22
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	bf 90       	pop	r11
     6de:	af 90       	pop	r10
     6e0:	9f 90       	pop	r9
     6e2:	8f 90       	pop	r8
     6e4:	08 95       	ret

000006e6 <printNote>:
    }
}

//@TODO: fix bug - indexOfNote anything other than 1 puts incorrect output
void printNote(unsigned char indexOfNote, unsigned char column) {
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	16 2f       	mov	r17, r22
        //return;
    //}    
    //lastIndex = indexOfNote;
    
    //discards const qualifier
    char* noteStr = (char* ) allNoteNames[indexOfNote];
     6ee:	e8 2f       	mov	r30, r24
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ee 0f       	add	r30, r30
     6f4:	ff 1f       	adc	r31, r31
     6f6:	e0 50       	subi	r30, 0x00	; 0
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	c0 81       	ld	r28, Z
     6fc:	d1 81       	ldd	r29, Z+1	; 0x01
    
    //Black key - necessitates special characters
    if (strlen(noteStr) == 9) {
     6fe:	fe 01       	movw	r30, r28
     700:	01 90       	ld	r0, Z+
     702:	00 20       	and	r0, r0
     704:	e9 f7       	brne	.-6      	; 0x700 <printNote+0x1a>
     706:	9f 01       	movw	r18, r30
     708:	2a 50       	subi	r18, 0x0A	; 10
     70a:	31 09       	sbc	r19, r1
     70c:	2c 17       	cp	r18, r28
     70e:	3d 07       	cpc	r19, r29
     710:	11 f5       	brne	.+68     	; 0x756 <printNote+0x70>
        
        LCD_ClearLine(true);
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	44 dd       	rcall	.-1400   	; 0x19e <LCD_ClearLine>
        //LCD_ClearScreen();
        
        //First note name
        //LCD_WriteSubstring(1, noteStr, 1);
        LCD_WriteSubstring(column + 0, noteStr, 1);
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	be 01       	movw	r22, r28
     71c:	81 2f       	mov	r24, r17
     71e:	ef dd       	rcall	.-1058   	; 0x2fe <LCD_WriteSubstring>
        
        //First note sharp
        //LCD_Cursor(2);
        LCD_Cursor(column + 1);
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	81 0f       	add	r24, r17
     724:	34 dd       	rcall	.-1432   	; 0x18e <LCD_Cursor>
        LCD_WriteData(SHARP_ADDR);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	29 dd       	rcall	.-1454   	; 0x17c <LCD_WriteData>
        
        //all in between sharp & flat
        //LCD_WriteSubstring(3, noteStr + 2, 5);
        LCD_WriteSubstring(column + 2, noteStr + 2, 5);
     72a:	be 01       	movw	r22, r28
     72c:	6e 5f       	subi	r22, 0xFE	; 254
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	45 e0       	ldi	r20, 0x05	; 5
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	81 0f       	add	r24, r17
     738:	e2 dd       	rcall	.-1084   	; 0x2fe <LCD_WriteSubstring>
        
        //Second note flat
        //LCD_Cursor(8);
        LCD_Cursor(column + 7);
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	81 0f       	add	r24, r17
     73e:	27 dd       	rcall	.-1458   	; 0x18e <LCD_Cursor>
        LCD_WriteData(FLAT_ADDR);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	1c dd       	rcall	.-1480   	; 0x17c <LCD_WriteData>
        
        //Second note number
        //LCD_WriteSubstring(9, noteStr + 8, 1);
        LCD_WriteSubstring(column + 8, noteStr + 8, 1);
     744:	be 01       	movw	r22, r28
     746:	68 5f       	subi	r22, 0xF8	; 248
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	81 0f       	add	r24, r17
     752:	d5 dd       	rcall	.-1110   	; 0x2fe <LCD_WriteSubstring>
     754:	03 c0       	rjmp	.+6      	; 0x75c <printNote+0x76>
    }
    
    //White key - just print like usual
    else {
        
        LCD_DisplayLine(true, noteStr);
     756:	be 01       	movw	r22, r28
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	35 dd       	rcall	.-1430   	; 0x1c6 <LCD_DisplayLine>
        //LCD_DisplayString(column, noteStr);
    }
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	08 95       	ret

00000764 <tick_Record>:
extern bool mic;

enum STATES_RECORD { RECORD_START,
    RECORD_OFF, RECORD_RECORD, RECORD_DONE };
    
unsigned char tick_Record(unsigned char state) {
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	c8 2f       	mov	r28, r24
    
    static unsigned char i;
    
    //Transitions
    switch (state) {
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	51 f0       	breq	.+20     	; 0x784 <tick_Record+0x20>
     770:	30 f0       	brcs	.+12     	; 0x77e <tick_Record+0x1a>
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	91 f0       	breq	.+36     	; 0x79a <tick_Record+0x36>
     776:	83 30       	cpi	r24, 0x03	; 3
     778:	09 f4       	brne	.+2      	; 0x77c <tick_Record+0x18>
     77a:	40 c0       	rjmp	.+128    	; 0x7fc <tick_Record+0x98>
     77c:	16 c0       	rjmp	.+44     	; 0x7aa <tick_Record+0x46>
        
        case RECORD_START:
        
            i = 0;
     77e:	10 92 44 03 	sts	0x0344, r1
            state = RECORD_OFF;
            break;
     782:	3c c0       	rjmp	.+120    	; 0x7fc <tick_Record+0x98>
            
        case RECORD_OFF:
        
            if (mode == RECORD) {
     784:	80 91 cd 03 	lds	r24, 0x03CD
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	c1 f5       	brne	.+112    	; 0x7fc <tick_Record+0x98>
                
                state = RECORD_RECORD;
                i = 0;
     78c:	10 92 44 03 	sts	0x0344, r1
                LCD_DisplayLine(false, "Mode: Record");
     790:	67 e9       	ldi	r22, 0x97	; 151
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	17 dd       	rcall	.-1490   	; 0x1c6 <LCD_DisplayLine>
     798:	2f c0       	rjmp	.+94     	; 0x7f8 <tick_Record+0x94>
            }
            break;
        
        case RECORD_RECORD:
        
            if (i < 64) {
     79a:	80 91 44 03 	lds	r24, 0x0344
     79e:	80 34       	cpi	r24, 0x40	; 64
     7a0:	58 f1       	brcs	.+86     	; 0x7f8 <tick_Record+0x94>
                
                state = RECORD_RECORD;
            } else {
                
                state = RECORD_DONE;
                i = 0;
     7a2:	10 92 44 03 	sts	0x0344, r1
            if (i < 64) {
                
                state = RECORD_RECORD;
            } else {
                
                state = RECORD_DONE;
     7a6:	c3 e0       	ldi	r28, 0x03	; 3
     7a8:	1b c0       	rjmp	.+54     	; 0x7e0 <tick_Record+0x7c>
            break;
    }
    
    
    //Actions
    switch (state) {
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	19 f0       	breq	.+6      	; 0x7b4 <tick_Record+0x50>
     7ae:	83 30       	cpi	r24, 0x03	; 3
     7b0:	b9 f0       	breq	.+46     	; 0x7e0 <tick_Record+0x7c>
     7b2:	25 c0       	rjmp	.+74     	; 0x7fe <tick_Record+0x9a>
        
        case RECORD_RECORD:
        
            ;   //c is weird
            unsigned char temp = getNote(mic, ud);
     7b4:	60 91 cf 03 	lds	r22, 0x03CF
     7b8:	80 91 d1 03 	lds	r24, 0x03D1
     7bc:	0d df       	rcall	.-486    	; 0x5d8 <getNote>
     7be:	18 2f       	mov	r17, r24
            printNote(temp, 1);
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	91 df       	rcall	.-222    	; 0x6e6 <printNote>
            //LCD_DisplayLine(false, i);
            LCD_DisplayDigits(false, i);
     7c4:	d0 91 44 03 	lds	r29, 0x0344
     7c8:	6d 2f       	mov	r22, r29
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	28 dd       	rcall	.-1456   	; 0x21e <LCD_DisplayDigits>
            //unsigned char temp = getNote(mic, ud);
            recordedSong[i] = temp;
     7ce:	ed 2f       	mov	r30, r29
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	e4 57       	subi	r30, 0x74	; 116
     7d4:	fc 4f       	sbci	r31, 0xFC	; 252
     7d6:	10 83       	st	Z, r17
            
            i++;
     7d8:	df 5f       	subi	r29, 0xFF	; 255
     7da:	d0 93 44 03 	sts	0x0344, r29
            break;
     7de:	0f c0       	rjmp	.+30     	; 0x7fe <tick_Record+0x9a>
            
        case RECORD_DONE:
        
            eeprom_update_block((const void*) recordedSong, (void*) 12, 64);
     7e0:	40 e4       	ldi	r20, 0x40	; 64
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	6c e0       	ldi	r22, 0x0C	; 12
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	8c e8       	ldi	r24, 0x8C	; 140
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	9a d4       	rcall	.+2356   	; 0x1122 <__eeupd_block_m1284>
            i = 0;
     7ee:	10 92 44 03 	sts	0x0344, r1
            task_in_progress = false;
     7f2:	10 92 cc 03 	sts	0x03CC, r1
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <tick_Record+0x9a>
extern bool mic;

enum STATES_RECORD { RECORD_START,
    RECORD_OFF, RECORD_RECORD, RECORD_DONE };
    
unsigned char tick_Record(unsigned char state) {
     7f8:	c2 e0       	ldi	r28, 0x02	; 2
     7fa:	dc cf       	rjmp	.-72     	; 0x7b4 <tick_Record+0x50>
            if (i < 64) {
                
                state = RECORD_RECORD;
            } else {
                
                state = RECORD_DONE;
     7fc:	c1 e0       	ldi	r28, 0x01	; 1
        default:
            break;
    }
    
    return state;
}
     7fe:	8c 2f       	mov	r24, r28
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	08 95       	ret

00000808 <getModeFromEnum>:
    //}
//}

char* getModeFromEnum(unsigned char mode_enum) {
    
    switch (mode_enum) {
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	69 f0       	breq	.+26     	; 0x826 <getModeFromEnum+0x1e>
     80c:	83 30       	cpi	r24, 0x03	; 3
     80e:	29 f0       	breq	.+10     	; 0x81a <getModeFromEnum+0x12>
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	31 f4       	brne	.+12     	; 0x820 <getModeFromEnum+0x18>
        
        case FREE_PLAY:
        return "Free Play";
     814:	80 ed       	ldi	r24, 0xD0	; 208
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	08 95       	ret
        
        case RECORD:
        return "Record";
        
        case PLAY_BACK:
        return "Play Back";
     81a:	84 ea       	ldi	r24, 0xA4	; 164
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	08 95       	ret
        
        default:
        return "getModeFromEnum() broken...";
     820:	8e ea       	ldi	r24, 0xAE	; 174
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	08 95       	ret
        
        case FREE_PLAY:
        return "Free Play";
        
        case RECORD:
        return "Record";
     826:	8d e9       	ldi	r24, 0x9D	; 157
     828:	91 e0       	ldi	r25, 0x01	; 1
        return "Play Back";
        
        default:
        return "getModeFromEnum() broken...";
    }
}
     82a:	08 95       	ret

0000082c <cycleLeft>:

unsigned char cycleLeft(unsigned char currentMode) {
    
    switch (currentMode) {
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	19 f0       	breq	.+6      	; 0x836 <cycleLeft+0xa>
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	29 f0       	breq	.+10     	; 0x83e <cycleLeft+0x12>
     834:	02 c0       	rjmp	.+4      	; 0x83a <cycleLeft+0xe>
        
        case FREE_PLAY:
        return PLAY_BACK;
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	08 95       	ret
        case PLAY_BACK:
        return RECORD;
        
        case RECORD:
        default:
        return FREE_PLAY;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	08 95       	ret
        
        case FREE_PLAY:
        return PLAY_BACK;
        
        case PLAY_BACK:
        return RECORD;
     83e:	82 e0       	ldi	r24, 0x02	; 2
        case RECORD:
        default:
        return FREE_PLAY;
        
    }
}
     840:	08 95       	ret

00000842 <getButtonInput>:
#include "freeplay_task.h"

bool getButtonInput(bool left) {

    //return ~(MyGetBit(PINA, RIGHT_BUTTON_PIN));
    if (left) {
     842:	88 23       	and	r24, r24
     844:	31 f0       	breq	.+12     	; 0x852 <getButtonInput+0x10>
        return !(MyGetBit(PINA, LEFT_BUTTON_PIN));
     846:	80 b1       	in	r24, 0x00	; 0
}

bool MyGetBit(unsigned char bitstring, unsigned char index) {

    //Shift index all the way to the right
    bitstring = bitstring >> index;
     848:	82 95       	swap	r24
     84a:	8f 70       	andi	r24, 0x0F	; 15
     84c:	80 95       	com	r24
     84e:	81 70       	andi	r24, 0x01	; 1
     850:	08 95       	ret
    } else {
        return !(MyGetBit(PINA, RIGHT_BUTTON_PIN));
     852:	80 b1       	in	r24, 0x00	; 0
     854:	86 95       	lsr	r24
     856:	86 95       	lsr	r24
     858:	80 95       	com	r24
     85a:	81 70       	andi	r24, 0x01	; 1
    }
}
     85c:	08 95       	ret

0000085e <tick_Menu>:

unsigned char tick_Menu(unsigned char state) {
     85e:	cf 93       	push	r28
     860:	c8 2f       	mov	r28, r24
    
    static unsigned char i;
    static unsigned char currentSelection;
    
    //Transitions
    switch (state) {
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	09 f4       	brne	.+2      	; 0x868 <tick_Menu+0xa>
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <tick_Menu+0x88>
     868:	28 f4       	brcc	.+10     	; 0x874 <tick_Menu+0x16>
     86a:	88 23       	and	r24, r24
     86c:	61 f0       	breq	.+24     	; 0x886 <tick_Menu+0x28>
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	c9 f0       	breq	.+50     	; 0x8a4 <tick_Menu+0x46>
     872:	6b c0       	rjmp	.+214    	; 0x94a <tick_Menu+0xec>
     874:	84 30       	cpi	r24, 0x04	; 4
     876:	09 f4       	brne	.+2      	; 0x87a <tick_Menu+0x1c>
     878:	53 c0       	rjmp	.+166    	; 0x920 <tick_Menu+0xc2>
     87a:	08 f4       	brcc	.+2      	; 0x87e <tick_Menu+0x20>
     87c:	4d c0       	rjmp	.+154    	; 0x918 <tick_Menu+0xba>
     87e:	85 30       	cpi	r24, 0x05	; 5
     880:	09 f4       	brne	.+2      	; 0x884 <tick_Menu+0x26>
     882:	54 c0       	rjmp	.+168    	; 0x92c <tick_Menu+0xce>
     884:	62 c0       	rjmp	.+196    	; 0x94a <tick_Menu+0xec>
        
        case MENU_START:
            mode = MENU;
     886:	10 92 cd 03 	sts	0x03CD, r1
            i = 0;
     88a:	10 92 46 03 	sts	0x0346, r1
            currentSelection = FREE_PLAY;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 45 03 	sts	0x0345, r24
            task_in_progress = false;
     894:	10 92 cc 03 	sts	0x03CC, r1
            state = MENU_DISP;
            
            //LCD_DisplayString(1, getModeFromEnum(currentSelection));
            LCD_DisplayLine(true, getModeFromEnum(currentSelection));
     898:	b7 df       	rcall	.-146    	; 0x808 <getModeFromEnum>
     89a:	bc 01       	movw	r22, r24
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	93 dc       	rcall	.-1754   	; 0x1c6 <LCD_DisplayLine>
        case MENU_START:
            mode = MENU;
            i = 0;
            currentSelection = FREE_PLAY;
            task_in_progress = false;
            state = MENU_DISP;
     8a0:	c1 e0       	ldi	r28, 0x01	; 1
            
            //LCD_DisplayString(1, getModeFromEnum(currentSelection));
            LCD_DisplayLine(true, getModeFromEnum(currentSelection));
            //LCD_DisplayString(1, "Menu START");
        
            break;
     8a2:	6d c0       	rjmp	.+218    	; 0x97e <tick_Menu+0x120>
        
        case MENU_DISP:
        
            //LCD_DisplayString(1, "STARTED in menu disp");
        
            if (lr == NO_JOY && !getButtonInput(true)) {
     8a4:	80 91 d0 03 	lds	r24, 0x03D0
     8a8:	81 11       	cpse	r24, r1
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <tick_Menu+0x58>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	c9 df       	rcall	.-110    	; 0x842 <getButtonInput>
     8b0:	88 23       	and	r24, r24
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <tick_Menu+0x58>
     8b4:	64 c0       	rjmp	.+200    	; 0x97e <tick_Menu+0x120>
                
                state = MENU_DISP;
            }
            
            else if (!getButtonInput(true)
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	c4 df       	rcall	.-120    	; 0x842 <getButtonInput>
     8ba:	81 11       	cpse	r24, r1
     8bc:	0f c0       	rjmp	.+30     	; 0x8dc <tick_Menu+0x7e>
            && (lr == DOWN_LO || lr == DOWN_HI)) {
     8be:	80 91 d0 03 	lds	r24, 0x03D0
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	11 f0       	breq	.+4      	; 0x8ca <tick_Menu+0x6c>
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	49 f4       	brne	.+18     	; 0x8dc <tick_Menu+0x7e>
                
                state = MENU_LEFT_WAIT;
                i = 0;
     8ca:	10 92 46 03 	sts	0x0346, r1
                currentSelection = cycleLeft(currentSelection);
     8ce:	80 91 45 03 	lds	r24, 0x0345
     8d2:	ac df       	rcall	.-168    	; 0x82c <cycleLeft>
     8d4:	80 93 45 03 	sts	0x0345, r24
            }
            
            else if (!getButtonInput(true)
            && (lr == DOWN_LO || lr == DOWN_HI)) {
                
                state = MENU_LEFT_WAIT;
     8d8:	c2 e0       	ldi	r28, 0x02	; 2
                i = 0;
                currentSelection = cycleLeft(currentSelection);
     8da:	51 c0       	rjmp	.+162    	; 0x97e <tick_Menu+0x120>
            }
            
            else if (getButtonInput(true)) {
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	b1 df       	rcall	.-158    	; 0x842 <getButtonInput>
     8e0:	81 11       	cpse	r24, r1
     8e2:	4b c0       	rjmp	.+150    	; 0x97a <tick_Menu+0x11c>
     8e4:	4c c0       	rjmp	.+152    	; 0x97e <tick_Menu+0x120>
            
            break;
        
        case MENU_LEFT_WAIT:
        
            if (getButtonInput(true)) {
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	ac df       	rcall	.-168    	; 0x842 <getButtonInput>
     8ea:	81 11       	cpse	r24, r1
     8ec:	46 c0       	rjmp	.+140    	; 0x97a <tick_Menu+0x11c>
            
                state = MENU_MODE_PRESS;
            
                } else if (lr == NO_JOY) {
     8ee:	80 91 d0 03 	lds	r24, 0x03D0
     8f2:	81 11       	cpse	r24, r1
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <tick_Menu+0xa8>
            
                state = MENU_DISP;
                //i = 0;
                //LCD_DisplayString(1, getModeFromEnum(currentSelection));
                LCD_DisplayLine(true, getModeFromEnum(currentSelection));
     8f6:	80 91 45 03 	lds	r24, 0x0345
     8fa:	86 df       	rcall	.-244    	; 0x808 <getModeFromEnum>
     8fc:	bc 01       	movw	r22, r24
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	62 dc       	rcall	.-1852   	; 0x1c6 <LCD_DisplayLine>
            
                state = MENU_MODE_PRESS;
            
                } else if (lr == NO_JOY) {
            
                state = MENU_DISP;
     902:	c1 e0       	ldi	r28, 0x01	; 1
     904:	3c c0       	rjmp	.+120    	; 0x97e <tick_Menu+0x120>
                //i = 0;
                //LCD_DisplayString(1, getModeFromEnum(currentSelection));
                LCD_DisplayLine(true, getModeFromEnum(currentSelection));
            
                } else if (lr == DOWN_LO || lr == DOWN_HI) {
     906:	84 30       	cpi	r24, 0x04	; 4
     908:	11 f0       	breq	.+4      	; 0x90e <tick_Menu+0xb0>
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	c1 f5       	brne	.+112    	; 0x97e <tick_Menu+0x120>
            
                state = ((i >= 50) ? MENU_LEFT_ACTIVE : MENU_LEFT_WAIT);
     90e:	80 91 46 03 	lds	r24, 0x0346
     912:	82 33       	cpi	r24, 0x32	; 50
     914:	f8 f4       	brcc	.+62     	; 0x954 <tick_Menu+0xf6>
     916:	33 c0       	rjmp	.+102    	; 0x97e <tick_Menu+0x120>
            break;
        
        case MENU_LEFT_ACTIVE:
        
            state = MENU_LEFT_WAIT;
            i = 0;
     918:	10 92 46 03 	sts	0x0346, r1
            }
            break;
        
        case MENU_LEFT_ACTIVE:
        
            state = MENU_LEFT_WAIT;
     91c:	c2 e0       	ldi	r28, 0x02	; 2
            i = 0;
            break;
     91e:	2f c0       	rjmp	.+94     	; 0x97e <tick_Menu+0x120>
        
        case MENU_MODE_PRESS:
        
            state = (getButtonInput(true) ? MENU_MODE_PRESS : MENU_MODE_RUNNING);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	8f df       	rcall	.-226    	; 0x842 <getButtonInput>
     924:	81 11       	cpse	r24, r1
     926:	29 c0       	rjmp	.+82     	; 0x97a <tick_Menu+0x11c>
     928:	c5 e0       	ldi	r28, 0x05	; 5
     92a:	29 c0       	rjmp	.+82     	; 0x97e <tick_Menu+0x120>
            //
                //state = MENU_MODE_RELEASE;
            //}
            //state = (task_in_progress ? MENU_MODE_RUNNING : MENU_DISP);
            
            if (task_in_progress) {
     92c:	80 91 cc 03 	lds	r24, 0x03CC
     930:	81 11       	cpse	r24, r1
     932:	25 c0       	rjmp	.+74     	; 0x97e <tick_Menu+0x120>
                state = MENU_MODE_RUNNING;
            } else {
                
                state = MENU_DISP;
                currentSelection = FREE_PLAY;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 45 03 	sts	0x0345, r24
                //LCD_DisplayString(1, getModeFromEnum(currentSelection));
                LCD_DisplayLine(true, getModeFromEnum(currentSelection));
     93a:	66 df       	rcall	.-308    	; 0x808 <getModeFromEnum>
     93c:	bc 01       	movw	r22, r24
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	42 dc       	rcall	.-1916   	; 0x1c6 <LCD_DisplayLine>
                task_in_progress = false;
     942:	10 92 cc 03 	sts	0x03CC, r1
            
            if (task_in_progress) {
                state = MENU_MODE_RUNNING;
            } else {
                
                state = MENU_DISP;
     946:	c1 e0       	ldi	r28, 0x01	; 1
     948:	1a c0       	rjmp	.+52     	; 0x97e <tick_Menu+0x120>
            break;
        
    }
    
    //Actions
    switch (state) {
     94a:	c3 30       	cpi	r28, 0x03	; 3
     94c:	21 f0       	breq	.+8      	; 0x956 <tick_Menu+0xf8>
     94e:	c4 30       	cpi	r28, 0x04	; 4
     950:	b1 f4       	brne	.+44     	; 0x97e <tick_Menu+0x120>
     952:	0b c0       	rjmp	.+22     	; 0x96a <tick_Menu+0x10c>
                //LCD_DisplayString(1, getModeFromEnum(currentSelection));
                LCD_DisplayLine(true, getModeFromEnum(currentSelection));
            
                } else if (lr == DOWN_LO || lr == DOWN_HI) {
            
                state = ((i >= 50) ? MENU_LEFT_ACTIVE : MENU_LEFT_WAIT);
     954:	c3 e0       	ldi	r28, 0x03	; 3
            //i++;
            //LCD_DisplayString(1, getModeFromEnum(currentSelection));
            break;
        
        case MENU_LEFT_ACTIVE:
            currentSelection = cycleLeft(currentSelection);
     956:	80 91 45 03 	lds	r24, 0x0345
     95a:	68 df       	rcall	.-304    	; 0x82c <cycleLeft>
     95c:	80 93 45 03 	sts	0x0345, r24
            //LCD_DisplayString(1, getModeFromEnum(currentSelection));
            LCD_DisplayLine(true, getModeFromEnum(currentSelection));
     960:	53 df       	rcall	.-346    	; 0x808 <getModeFromEnum>
     962:	bc 01       	movw	r22, r24
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	2f dc       	rcall	.-1954   	; 0x1c6 <LCD_DisplayLine>
            break;
     968:	0a c0       	rjmp	.+20     	; 0x97e <tick_Menu+0x120>
        
        case MENU_MODE_PRESS:
            mode = currentSelection;
     96a:	80 91 45 03 	lds	r24, 0x0345
     96e:	80 93 cd 03 	sts	0x03CD, r24
            task_in_progress = true;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 cc 03 	sts	0x03CC, r24
            break;
     978:	02 c0       	rjmp	.+4      	; 0x97e <tick_Menu+0x120>
                //LCD_DisplayString(1, getModeFromEnum(currentSelection));
                LCD_DisplayLine(true, getModeFromEnum(currentSelection));
            
                } else if (lr == DOWN_LO || lr == DOWN_HI) {
            
                state = ((i >= 50) ? MENU_LEFT_ACTIVE : MENU_LEFT_WAIT);
     97a:	c4 e0       	ldi	r28, 0x04	; 4
     97c:	f6 cf       	rjmp	.-20     	; 0x96a <tick_Menu+0x10c>
            break;
        
    }
    
    return state;
}
     97e:	8c 2f       	mov	r24, r28
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <tick_ADC_in>:
enum STATES_ADC_IN {
    ADC_IN_START,
    ADC_IN_UD, ADC_IN_LR, ADC_IN_MIC
    };

unsigned char tick_ADC_in(unsigned char state) {
     984:	cf 93       	push	r28
     986:	c8 2f       	mov	r28, r24
    
    //Transitions
    switch (state) {
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	91 f0       	breq	.+36     	; 0x9b0 <tick_ADC_in+0x2c>
     98c:	58 f0       	brcs	.+22     	; 0x9a4 <tick_ADC_in+0x20>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	e9 f0       	breq	.+58     	; 0x9cc <tick_ADC_in+0x48>
     992:	83 30       	cpi	r24, 0x03	; 3
     994:	39 f0       	breq	.+14     	; 0x9a4 <tick_ADC_in+0x20>
            
        
    }
    
    //Actions
    switch (state) {
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	61 f0       	breq	.+24     	; 0x9b2 <tick_ADC_in+0x2e>
     99a:	83 30       	cpi	r24, 0x03	; 3
     99c:	c1 f0       	breq	.+48     	; 0x9ce <tick_ADC_in+0x4a>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	d1 f4       	brne	.+52     	; 0x9d6 <tick_ADC_in+0x52>
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <tick_ADC_in+0x22>
    
    //Transitions
    switch (state) {
        
        case ADC_IN_START:
            state = ADC_IN_UD;
     9a4:	c1 e0       	ldi	r28, 0x01	; 1
    
    //Actions
    switch (state) {
        
        case ADC_IN_UD:
            ud = getJoystickDiscrete(JOY_UD_PIN);
     9a6:	83 e0       	ldi	r24, 0x03	; 3
     9a8:	90 db       	rcall	.-2272   	; 0xca <getJoystickDiscrete>
     9aa:	80 93 cf 03 	sts	0x03CF, r24
            break;
     9ae:	13 c0       	rjmp	.+38     	; 0x9d6 <tick_ADC_in+0x52>
        case ADC_IN_START:
            state = ADC_IN_UD;
            break;
            
        case ADC_IN_UD:
            state = ADC_IN_LR;
     9b0:	c2 e0       	ldi	r28, 0x02	; 2
        case ADC_IN_UD:
            ud = getJoystickDiscrete(JOY_UD_PIN);
            break;
            
        case ADC_IN_LR:
            lr = getJoystickDiscrete(JOY_LR_PIN);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	8a db       	rcall	.-2284   	; 0xca <getJoystickDiscrete>
     9b6:	80 93 d0 03 	sts	0x03D0, r24
const unsigned short MID = 512;

//Takes input from ADC
short getJoystickValue(unsigned char pin) {
    
    ADMUX = pin;
     9ba:	10 92 7c 00 	sts	0x007C, r1
    return ADC;
     9be:	20 91 78 00 	lds	r18, 0x0078
     9c2:	30 91 79 00 	lds	r19, 0x0079
            lr_actual = getJoystickValue(JOY_LR_PIN);
     9c6:	20 93 ce 03 	sts	0x03CE, r18
            break;
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <tick_ADC_in+0x52>
        case ADC_IN_UD:
            state = ADC_IN_LR;
            break;
            
        case ADC_IN_LR:
            state = ADC_IN_MIC;
     9cc:	c3 e0       	ldi	r28, 0x03	; 3
            lr_actual = getJoystickValue(JOY_LR_PIN);
            break;
            
        case ADC_IN_MIC:
            //mic = getMicBinary(MIC_PIN);  //@TODO: test with actual mic
            mic = getButtonInput(false);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	38 df       	rcall	.-400    	; 0x842 <getButtonInput>
     9d2:	80 93 d1 03 	sts	0x03D1, r24
            break;
            
    }
    
    return state;
}
     9d6:	8c 2f       	mov	r24, r28
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <tick_Freeplay>:
enum STATES_FREEPLAY {
    FREEPLAY_START,
    FREEPLAY_OFF, FREEPLAY_PLAYING
    };

unsigned char tick_Freeplay(unsigned char state) {
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	c8 2f       	mov	r28, r24
    
    static unsigned char lastNote;
    
    //Transitions
    switch (state) {
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	41 f0       	breq	.+16     	; 0x9f6 <tick_Freeplay+0x1a>
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <tick_Freeplay+0x12>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	c9 f0       	breq	.+50     	; 0xa1e <tick_Freeplay+0x42>
     9ec:	1f c0       	rjmp	.+62     	; 0xa2c <tick_Freeplay+0x50>
        
        case FREEPLAY_START:
            state = FREEPLAY_OFF;
            lastNote = SHH_INDEX;
     9ee:	81 e2       	ldi	r24, 0x21	; 33
     9f0:	80 93 42 03 	sts	0x0342, r24
            break;
     9f4:	41 c0       	rjmp	.+130    	; 0xa78 <tick_Freeplay+0x9c>
            
        case FREEPLAY_OFF:
            //state = (mode == FREE_PLAY ? FREEPLAY_PLAYING : FREEPLAY_OFF);
            if (mode == FREE_PLAY) {
     9f6:	80 91 cd 03 	lds	r24, 0x03CD
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	09 f0       	breq	.+2      	; 0xa00 <tick_Freeplay+0x24>
     9fe:	3c c0       	rjmp	.+120    	; 0xa78 <tick_Freeplay+0x9c>
                
                printNote(SHH_INDEX, 1);
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	81 e2       	ldi	r24, 0x21	; 33
     a04:	70 de       	rcall	.-800    	; 0x6e6 <printNote>
                LCD_DisplayLine(false, "Mode: Free Play");
     a06:	6a ec       	ldi	r22, 0xCA	; 202
     a08:	71 e0       	ldi	r23, 0x01	; 1
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	dc db       	rcall	.-2120   	; 0x1c6 <LCD_DisplayLine>
                set_PWM(0);
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	cb 01       	movw	r24, r22
     a14:	f6 dc       	rcall	.-1556   	; 0x402 <set_PWM>
                lastNote = SHH_INDEX;
     a16:	81 e2       	ldi	r24, 0x21	; 33
     a18:	80 93 42 03 	sts	0x0342, r24
     a1c:	2b c0       	rjmp	.+86     	; 0xa74 <tick_Freeplay+0x98>
            }
            break;
            
        case FREEPLAY_PLAYING:
            //state = (getButtonInput(true) ? FREEPLAY_OFF : FREEPLAY_PLAYING);
            if (getButtonInput(true)) {
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	10 df       	rcall	.-480    	; 0x842 <getButtonInput>
     a22:	88 23       	and	r24, r24
     a24:	39 f1       	breq	.+78     	; 0xa74 <tick_Freeplay+0x98>
                
                state = FREEPLAY_OFF;
                task_in_progress = false;
     a26:	10 92 cc 03 	sts	0x03CC, r1
     a2a:	26 c0       	rjmp	.+76     	; 0xa78 <tick_Freeplay+0x9c>
            
            break;
    }
    
    //Actions
    switch (state) {
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	29 f5       	brne	.+74     	; 0xa7a <tick_Freeplay+0x9e>
        
        case FREEPLAY_PLAYING:
        
            ;
            unsigned char temp = getNote(mic, ud);
     a30:	60 91 cf 03 	lds	r22, 0x03CF
     a34:	80 91 d1 03 	lds	r24, 0x03D1
     a38:	cf dd       	rcall	.-1122   	; 0x5d8 <getNote>
     a3a:	d8 2f       	mov	r29, r24
            //if (temp == lastNote) {
                //break;
            //}
            
            set_PWM(frequencies[temp] + getVibrato(temp, lr_actual));
     a3c:	60 91 ce 03 	lds	r22, 0x03CE
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	d7 dd       	rcall	.-1106   	; 0x5f2 <getVibrato>
     a44:	ed 2f       	mov	r30, r29
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e6 55       	subi	r30, 0x56	; 86
     a52:	fd 4f       	sbci	r31, 0xFD	; 253
     a54:	20 81       	ld	r18, Z
     a56:	31 81       	ldd	r19, Z+1	; 0x01
     a58:	42 81       	ldd	r20, Z+2	; 0x02
     a5a:	53 81       	ldd	r21, Z+3	; 0x03
     a5c:	31 d1       	rcall	.+610    	; 0xcc0 <__addsf3>
     a5e:	d1 dc       	rcall	.-1630   	; 0x402 <set_PWM>
            
            if (temp != lastNote) {
     a60:	80 91 42 03 	lds	r24, 0x0342
     a64:	d8 17       	cp	r29, r24
     a66:	19 f0       	breq	.+6      	; 0xa6e <tick_Freeplay+0x92>
                printNote(temp, 1);
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	8d 2f       	mov	r24, r29
     a6c:	3c de       	rcall	.-904    	; 0x6e6 <printNote>
            }
                        
            lastNote = temp;
     a6e:	d0 93 42 03 	sts	0x0342, r29
            
            break;
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <tick_Freeplay+0x9e>
enum STATES_FREEPLAY {
    FREEPLAY_START,
    FREEPLAY_OFF, FREEPLAY_PLAYING
    };

unsigned char tick_Freeplay(unsigned char state) {
     a74:	c2 e0       	ldi	r28, 0x02	; 2
     a76:	dc cf       	rjmp	.-72     	; 0xa30 <tick_Freeplay+0x54>
     a78:	c1 e0       	ldi	r28, 0x01	; 1
        default:
            break;
            
    }
    return state;
}
     a7a:	8c 2f       	mov	r24, r28
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <init_tasks>:

void init_tasks() {
    
    unsigned char i = 0;
    
    tasks[i].state = MENU_START;
     a82:	10 92 51 03 	sts	0x0351, r1
     a86:	10 92 50 03 	sts	0x0350, r1
    tasks[i].period = 200;
     a8a:	88 ec       	ldi	r24, 0xC8	; 200
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	80 93 52 03 	sts	0x0352, r24
     a96:	90 93 53 03 	sts	0x0353, r25
     a9a:	a0 93 54 03 	sts	0x0354, r26
     a9e:	b0 93 55 03 	sts	0x0355, r27
    tasks[i].elapsedTime = tasks[i].period;
     aa2:	80 93 56 03 	sts	0x0356, r24
     aa6:	90 93 57 03 	sts	0x0357, r25
     aaa:	a0 93 58 03 	sts	0x0358, r26
     aae:	b0 93 59 03 	sts	0x0359, r27
    tasks[i].TickFct = &tick_Menu;
     ab2:	8f e2       	ldi	r24, 0x2F	; 47
     ab4:	94 e0       	ldi	r25, 0x04	; 4
     ab6:	90 93 5b 03 	sts	0x035B, r25
     aba:	80 93 5a 03 	sts	0x035A, r24
    
    i++;
    
    tasks[i].state = ADC_IN_START;
     abe:	10 92 5d 03 	sts	0x035D, r1
     ac2:	10 92 5c 03 	sts	0x035C, r1
    tasks[i].period = 20;
     ac6:	84 e1       	ldi	r24, 0x14	; 20
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	a0 e0       	ldi	r26, 0x00	; 0
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	80 93 5e 03 	sts	0x035E, r24
     ad2:	90 93 5f 03 	sts	0x035F, r25
     ad6:	a0 93 60 03 	sts	0x0360, r26
     ada:	b0 93 61 03 	sts	0x0361, r27
    tasks[i].elapsedTime = tasks[i].period;
     ade:	80 93 62 03 	sts	0x0362, r24
     ae2:	90 93 63 03 	sts	0x0363, r25
     ae6:	a0 93 64 03 	sts	0x0364, r26
     aea:	b0 93 65 03 	sts	0x0365, r27
    tasks[i].TickFct = &tick_ADC_in;
     aee:	82 ec       	ldi	r24, 0xC2	; 194
     af0:	94 e0       	ldi	r25, 0x04	; 4
     af2:	90 93 67 03 	sts	0x0367, r25
     af6:	80 93 66 03 	sts	0x0366, r24
    
    i++;
    
    tasks[i].state = FREEPLAY_START;
     afa:	10 92 69 03 	sts	0x0369, r1
     afe:	10 92 68 03 	sts	0x0368, r1
    tasks[i].period = 10;
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	80 93 6a 03 	sts	0x036A, r24
     b0e:	90 93 6b 03 	sts	0x036B, r25
     b12:	a0 93 6c 03 	sts	0x036C, r26
     b16:	b0 93 6d 03 	sts	0x036D, r27
    tasks[i].elapsedTime = tasks[i].period;
     b1a:	80 93 6e 03 	sts	0x036E, r24
     b1e:	90 93 6f 03 	sts	0x036F, r25
     b22:	a0 93 70 03 	sts	0x0370, r26
     b26:	b0 93 71 03 	sts	0x0371, r27
    tasks[i].TickFct = &tick_Freeplay;
     b2a:	2e ee       	ldi	r18, 0xEE	; 238
     b2c:	34 e0       	ldi	r19, 0x04	; 4
     b2e:	30 93 73 03 	sts	0x0373, r19
     b32:	20 93 72 03 	sts	0x0372, r18
    
    i++;
    
    tasks[i].state = RECORD_START;
     b36:	10 92 75 03 	sts	0x0375, r1
     b3a:	10 92 74 03 	sts	0x0374, r1
    tasks[i].period = 10;
     b3e:	80 93 76 03 	sts	0x0376, r24
     b42:	90 93 77 03 	sts	0x0377, r25
     b46:	a0 93 78 03 	sts	0x0378, r26
     b4a:	b0 93 79 03 	sts	0x0379, r27
    tasks[i].elapsedTime = tasks[i].period;
     b4e:	80 93 7a 03 	sts	0x037A, r24
     b52:	90 93 7b 03 	sts	0x037B, r25
     b56:	a0 93 7c 03 	sts	0x037C, r26
     b5a:	b0 93 7d 03 	sts	0x037D, r27
    tasks[i].TickFct = &tick_Record;
     b5e:	22 eb       	ldi	r18, 0xB2	; 178
     b60:	33 e0       	ldi	r19, 0x03	; 3
     b62:	30 93 7f 03 	sts	0x037F, r19
     b66:	20 93 7e 03 	sts	0x037E, r18
    
    i++;
    
    tasks[i].state = PLAYBACK_START;
     b6a:	10 92 81 03 	sts	0x0381, r1
     b6e:	10 92 80 03 	sts	0x0380, r1
    tasks[i].period = 10;
     b72:	80 93 82 03 	sts	0x0382, r24
     b76:	90 93 83 03 	sts	0x0383, r25
     b7a:	a0 93 84 03 	sts	0x0384, r26
     b7e:	b0 93 85 03 	sts	0x0385, r27
    tasks[i].elapsedTime = tasks[i].period;
     b82:	80 93 86 03 	sts	0x0386, r24
     b86:	90 93 87 03 	sts	0x0387, r25
     b8a:	a0 93 88 03 	sts	0x0388, r26
     b8e:	b0 93 89 03 	sts	0x0389, r27
    tasks[i].TickFct = &tick_Playback;
     b92:	8a e6       	ldi	r24, 0x6A	; 106
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	90 93 8b 03 	sts	0x038B, r25
     b9a:	80 93 8a 03 	sts	0x038A, r24
     b9e:	08 95       	ret

00000ba0 <init_vars>:
    
    i++;
}    

void init_vars() {
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	c0 54       	subi	r28, 0x40	; 64
     baa:	d1 09       	sbc	r29, r1
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
    
    //ADC input (need PA0:PA3)
    DDRA = 0x00;
     bb6:	11 b8       	out	0x01, r1	; 1
    PORTA = 0xFF;
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	82 b9       	out	0x02, r24	; 2
    
    //LCD display output
    DDRC = 0xFF;
     bbc:	87 b9       	out	0x07, r24	; 7
    PORTC = 0x00;
     bbe:	18 b8       	out	0x08, r1	; 8
    
    //PD0-PD3: Button input
    //PD6-PD7: LCD output
    DDRD = 0xC0;    //1100 0000
     bc0:	90 ec       	ldi	r25, 0xC0	; 192
     bc2:	9a b9       	out	0x0a, r25	; 10
    PORTD = 0x3F;   //0011 1111
     bc4:	9f e3       	ldi	r25, 0x3F	; 63
     bc6:	9b b9       	out	0x0b, r25	; 11
    
    //PB6: Speaker output
    DDRB = 0xFF;
     bc8:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
     bca:	15 b8       	out	0x05, r1	; 5
    
    ADC_init();
     bcc:	d3 dc       	rcall	.-1626   	; 0x574 <ADC_init>
    
    LCD_init();
     bce:	c7 da       	rcall	.-2674   	; 0x15e <LCD_init>

    PWM_on();
     bd0:	c6 dc       	rcall	.-1652   	; 0x55e <PWM_on>
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     bd2:	8a e0       	ldi	r24, 0x0A	; 10
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 e0       	ldi	r26, 0x00	; 0
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	80 93 44 01 	sts	0x0144, r24
     bde:	90 93 45 01 	sts	0x0145, r25
     be2:	a0 93 46 01 	sts	0x0146, r26
     be6:	b0 93 47 01 	sts	0x0147, r27
	_avr_timer_cntcurr = _avr_timer_M;
     bea:	80 93 4b 03 	sts	0x034B, r24
     bee:	90 93 4c 03 	sts	0x034C, r25
     bf2:	a0 93 4d 03 	sts	0x034D, r26
     bf6:	b0 93 4e 03 	sts	0x034E, r27
    
    //Initialize timer
    //TimerSet(TIMER_PERIOD);
    TimerSet(tasksPeriodGCD);
    TimerOn();
     bfa:	a3 db       	rcall	.-2234   	; 0x342 <TimerOn>
    
    buildSymbols();
     bfc:	c1 dc       	rcall	.-1662   	; 0x580 <buildSymbols>

    //initialize recordedSong
    unsigned char temp[64];
    memset((void*) temp, SHH_INDEX, 64);
     bfe:	40 e4       	ldi	r20, 0x40	; 64
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	61 e2       	ldi	r22, 0x21	; 33
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	ce 01       	movw	r24, r28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	74 d2       	rcall	.+1256   	; 0x10f4 <memset>
    eeprom_update_block((const void*) temp, (void*) 12, 64);
     c0c:	40 e4       	ldi	r20, 0x40	; 64
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	6c e0       	ldi	r22, 0x0C	; 12
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	ce 01       	movw	r24, r28
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	84 d2       	rcall	.+1288   	; 0x1122 <__eeupd_block_m1284>
        
}
     c1a:	c0 5c       	subi	r28, 0xC0	; 192
     c1c:	df 4f       	sbci	r29, 0xFF	; 255
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <scheduler>:

void scheduler() {
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	c0 e5       	ldi	r28, 0x50	; 80
     c3c:	d3 e0       	ldi	r29, 0x03	; 3
     c3e:	0f 2e       	mov	r0, r31
     c40:	fc e8       	ldi	r31, 0x8C	; 140
     c42:	ef 2e       	mov	r14, r31
     c44:	f3 e0       	ldi	r31, 0x03	; 3
     c46:	ff 2e       	mov	r15, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	8e 01       	movw	r16, r28
        
    for (unsigned char i = 0; i < tasksNum; i++) {
            
        if (tasks[i].elapsedTime >= tasks[i].period) {
     c4c:	4e 81       	ldd	r20, Y+6	; 0x06
     c4e:	5f 81       	ldd	r21, Y+7	; 0x07
     c50:	68 85       	ldd	r22, Y+8	; 0x08
     c52:	79 85       	ldd	r23, Y+9	; 0x09
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	ac 81       	ldd	r26, Y+4	; 0x04
     c5a:	bd 81       	ldd	r27, Y+5	; 0x05
     c5c:	48 17       	cp	r20, r24
     c5e:	59 07       	cpc	r21, r25
     c60:	6a 07       	cpc	r22, r26
     c62:	7b 07       	cpc	r23, r27
     c64:	58 f0       	brcs	.+22     	; 0xc7c <scheduler+0x4e>
                
            // Task is ready to tick, so call its tick function
            tasks[i].state = tasks[i].TickFct(tasks[i].state);
     c66:	ea 85       	ldd	r30, Y+10	; 0x0a
     c68:	fb 85       	ldd	r31, Y+11	; 0x0b
     c6a:	88 81       	ld	r24, Y
     c6c:	99 81       	ldd	r25, Y+1	; 0x01
     c6e:	09 95       	icall
     c70:	99 83       	std	Y+1, r25	; 0x01
     c72:	88 83       	st	Y, r24
            tasks[i].elapsedTime = 0; // Reset the elapsed time
     c74:	1e 82       	std	Y+6, r1	; 0x06
     c76:	1f 82       	std	Y+7, r1	; 0x07
     c78:	18 86       	std	Y+8, r1	; 0x08
     c7a:	19 86       	std	Y+9, r1	; 0x09
                
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
     c7c:	f8 01       	movw	r30, r16
     c7e:	86 81       	ldd	r24, Z+6	; 0x06
     c80:	97 81       	ldd	r25, Z+7	; 0x07
     c82:	a0 85       	ldd	r26, Z+8	; 0x08
     c84:	b1 85       	ldd	r27, Z+9	; 0x09
     c86:	0a 96       	adiw	r24, 0x0a	; 10
     c88:	a1 1d       	adc	r26, r1
     c8a:	b1 1d       	adc	r27, r1
     c8c:	86 83       	std	Z+6, r24	; 0x06
     c8e:	97 83       	std	Z+7, r25	; 0x07
     c90:	a0 87       	std	Z+8, r26	; 0x08
     c92:	b1 87       	std	Z+9, r27	; 0x09
     c94:	2c 96       	adiw	r28, 0x0c	; 12
        
}

void scheduler() {
        
    for (unsigned char i = 0; i < tasksNum; i++) {
     c96:	ce 15       	cp	r28, r14
     c98:	df 05       	cpc	r29, r15
     c9a:	b9 f6       	brne	.-82     	; 0xc4a <scheduler+0x1c>
                
        }
        tasks[i].elapsedTime += tasksPeriodGCD;
        //tasks[i].elapsedTime += TIMER_PERIOD;
    }
}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	08 95       	ret

00000caa <main>:

int main(void) {
    
    
    init_vars();
     caa:	7a df       	rcall	.-268    	; 0xba0 <init_vars>
    init_tasks();
     cac:	ea de       	rcall	.-556    	; 0xa82 <init_tasks>
    
    //LCD_DisplayString(1, "hello world!");
        
    while (true) {
        
        scheduler();
     cae:	bf df       	rcall	.-130    	; 0xc2e <scheduler>

        while (!TimerFlag) {}
     cb0:	80 91 4f 03 	lds	r24, 0x034F
     cb4:	88 23       	and	r24, r24
     cb6:	e1 f3       	breq	.-8      	; 0xcb0 <main+0x6>
        TimerFlag = false;
     cb8:	10 92 4f 03 	sts	0x034F, r1
    }
     cbc:	f8 cf       	rjmp	.-16     	; 0xcae <main+0x4>

00000cbe <__subsf3>:
     cbe:	50 58       	subi	r21, 0x80	; 128

00000cc0 <__addsf3>:
     cc0:	bb 27       	eor	r27, r27
     cc2:	aa 27       	eor	r26, r26
     cc4:	0e d0       	rcall	.+28     	; 0xce2 <__addsf3x>
     cc6:	75 c1       	rjmp	.+746    	; 0xfb2 <__fp_round>
     cc8:	66 d1       	rcall	.+716    	; 0xf96 <__fp_pscA>
     cca:	30 f0       	brcs	.+12     	; 0xcd8 <__addsf3+0x18>
     ccc:	6b d1       	rcall	.+726    	; 0xfa4 <__fp_pscB>
     cce:	20 f0       	brcs	.+8      	; 0xcd8 <__addsf3+0x18>
     cd0:	31 f4       	brne	.+12     	; 0xcde <__addsf3+0x1e>
     cd2:	9f 3f       	cpi	r25, 0xFF	; 255
     cd4:	11 f4       	brne	.+4      	; 0xcda <__addsf3+0x1a>
     cd6:	1e f4       	brtc	.+6      	; 0xcde <__addsf3+0x1e>
     cd8:	5b c1       	rjmp	.+694    	; 0xf90 <__fp_nan>
     cda:	0e f4       	brtc	.+2      	; 0xcde <__addsf3+0x1e>
     cdc:	e0 95       	com	r30
     cde:	e7 fb       	bst	r30, 7
     ce0:	51 c1       	rjmp	.+674    	; 0xf84 <__fp_inf>

00000ce2 <__addsf3x>:
     ce2:	e9 2f       	mov	r30, r25
     ce4:	77 d1       	rcall	.+750    	; 0xfd4 <__fp_split3>
     ce6:	80 f3       	brcs	.-32     	; 0xcc8 <__addsf3+0x8>
     ce8:	ba 17       	cp	r27, r26
     cea:	62 07       	cpc	r22, r18
     cec:	73 07       	cpc	r23, r19
     cee:	84 07       	cpc	r24, r20
     cf0:	95 07       	cpc	r25, r21
     cf2:	18 f0       	brcs	.+6      	; 0xcfa <__addsf3x+0x18>
     cf4:	71 f4       	brne	.+28     	; 0xd12 <__addsf3x+0x30>
     cf6:	9e f5       	brtc	.+102    	; 0xd5e <__addsf3x+0x7c>
     cf8:	8f c1       	rjmp	.+798    	; 0x1018 <__fp_zero>
     cfa:	0e f4       	brtc	.+2      	; 0xcfe <__addsf3x+0x1c>
     cfc:	e0 95       	com	r30
     cfe:	0b 2e       	mov	r0, r27
     d00:	ba 2f       	mov	r27, r26
     d02:	a0 2d       	mov	r26, r0
     d04:	0b 01       	movw	r0, r22
     d06:	b9 01       	movw	r22, r18
     d08:	90 01       	movw	r18, r0
     d0a:	0c 01       	movw	r0, r24
     d0c:	ca 01       	movw	r24, r20
     d0e:	a0 01       	movw	r20, r0
     d10:	11 24       	eor	r1, r1
     d12:	ff 27       	eor	r31, r31
     d14:	59 1b       	sub	r21, r25
     d16:	99 f0       	breq	.+38     	; 0xd3e <__addsf3x+0x5c>
     d18:	59 3f       	cpi	r21, 0xF9	; 249
     d1a:	50 f4       	brcc	.+20     	; 0xd30 <__addsf3x+0x4e>
     d1c:	50 3e       	cpi	r21, 0xE0	; 224
     d1e:	68 f1       	brcs	.+90     	; 0xd7a <__addsf3x+0x98>
     d20:	1a 16       	cp	r1, r26
     d22:	f0 40       	sbci	r31, 0x00	; 0
     d24:	a2 2f       	mov	r26, r18
     d26:	23 2f       	mov	r18, r19
     d28:	34 2f       	mov	r19, r20
     d2a:	44 27       	eor	r20, r20
     d2c:	58 5f       	subi	r21, 0xF8	; 248
     d2e:	f3 cf       	rjmp	.-26     	; 0xd16 <__addsf3x+0x34>
     d30:	46 95       	lsr	r20
     d32:	37 95       	ror	r19
     d34:	27 95       	ror	r18
     d36:	a7 95       	ror	r26
     d38:	f0 40       	sbci	r31, 0x00	; 0
     d3a:	53 95       	inc	r21
     d3c:	c9 f7       	brne	.-14     	; 0xd30 <__addsf3x+0x4e>
     d3e:	7e f4       	brtc	.+30     	; 0xd5e <__addsf3x+0x7c>
     d40:	1f 16       	cp	r1, r31
     d42:	ba 0b       	sbc	r27, r26
     d44:	62 0b       	sbc	r22, r18
     d46:	73 0b       	sbc	r23, r19
     d48:	84 0b       	sbc	r24, r20
     d4a:	ba f0       	brmi	.+46     	; 0xd7a <__addsf3x+0x98>
     d4c:	91 50       	subi	r25, 0x01	; 1
     d4e:	a1 f0       	breq	.+40     	; 0xd78 <__addsf3x+0x96>
     d50:	ff 0f       	add	r31, r31
     d52:	bb 1f       	adc	r27, r27
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	88 1f       	adc	r24, r24
     d5a:	c2 f7       	brpl	.-16     	; 0xd4c <__addsf3x+0x6a>
     d5c:	0e c0       	rjmp	.+28     	; 0xd7a <__addsf3x+0x98>
     d5e:	ba 0f       	add	r27, r26
     d60:	62 1f       	adc	r22, r18
     d62:	73 1f       	adc	r23, r19
     d64:	84 1f       	adc	r24, r20
     d66:	48 f4       	brcc	.+18     	; 0xd7a <__addsf3x+0x98>
     d68:	87 95       	ror	r24
     d6a:	77 95       	ror	r23
     d6c:	67 95       	ror	r22
     d6e:	b7 95       	ror	r27
     d70:	f7 95       	ror	r31
     d72:	9e 3f       	cpi	r25, 0xFE	; 254
     d74:	08 f0       	brcs	.+2      	; 0xd78 <__addsf3x+0x96>
     d76:	b3 cf       	rjmp	.-154    	; 0xcde <__addsf3+0x1e>
     d78:	93 95       	inc	r25
     d7a:	88 0f       	add	r24, r24
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <__addsf3x+0x9e>
     d7e:	99 27       	eor	r25, r25
     d80:	ee 0f       	add	r30, r30
     d82:	97 95       	ror	r25
     d84:	87 95       	ror	r24
     d86:	08 95       	ret

00000d88 <__cmpsf2>:
     d88:	d9 d0       	rcall	.+434    	; 0xf3c <__fp_cmp>
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__cmpsf2+0x6>
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	08 95       	ret

00000d90 <__divsf3>:
     d90:	0c d0       	rcall	.+24     	; 0xdaa <__divsf3x>
     d92:	0f c1       	rjmp	.+542    	; 0xfb2 <__fp_round>
     d94:	07 d1       	rcall	.+526    	; 0xfa4 <__fp_pscB>
     d96:	40 f0       	brcs	.+16     	; 0xda8 <__divsf3+0x18>
     d98:	fe d0       	rcall	.+508    	; 0xf96 <__fp_pscA>
     d9a:	30 f0       	brcs	.+12     	; 0xda8 <__divsf3+0x18>
     d9c:	21 f4       	brne	.+8      	; 0xda6 <__divsf3+0x16>
     d9e:	5f 3f       	cpi	r21, 0xFF	; 255
     da0:	19 f0       	breq	.+6      	; 0xda8 <__divsf3+0x18>
     da2:	f0 c0       	rjmp	.+480    	; 0xf84 <__fp_inf>
     da4:	51 11       	cpse	r21, r1
     da6:	39 c1       	rjmp	.+626    	; 0x101a <__fp_szero>
     da8:	f3 c0       	rjmp	.+486    	; 0xf90 <__fp_nan>

00000daa <__divsf3x>:
     daa:	14 d1       	rcall	.+552    	; 0xfd4 <__fp_split3>
     dac:	98 f3       	brcs	.-26     	; 0xd94 <__divsf3+0x4>

00000dae <__divsf3_pse>:
     dae:	99 23       	and	r25, r25
     db0:	c9 f3       	breq	.-14     	; 0xda4 <__divsf3+0x14>
     db2:	55 23       	and	r21, r21
     db4:	b1 f3       	breq	.-20     	; 0xda2 <__divsf3+0x12>
     db6:	95 1b       	sub	r25, r21
     db8:	55 0b       	sbc	r21, r21
     dba:	bb 27       	eor	r27, r27
     dbc:	aa 27       	eor	r26, r26
     dbe:	62 17       	cp	r22, r18
     dc0:	73 07       	cpc	r23, r19
     dc2:	84 07       	cpc	r24, r20
     dc4:	38 f0       	brcs	.+14     	; 0xdd4 <__divsf3_pse+0x26>
     dc6:	9f 5f       	subi	r25, 0xFF	; 255
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	44 1f       	adc	r20, r20
     dd0:	aa 1f       	adc	r26, r26
     dd2:	a9 f3       	breq	.-22     	; 0xdbe <__divsf3_pse+0x10>
     dd4:	33 d0       	rcall	.+102    	; 0xe3c <__divsf3_pse+0x8e>
     dd6:	0e 2e       	mov	r0, r30
     dd8:	3a f0       	brmi	.+14     	; 0xde8 <__divsf3_pse+0x3a>
     dda:	e0 e8       	ldi	r30, 0x80	; 128
     ddc:	30 d0       	rcall	.+96     	; 0xe3e <__divsf3_pse+0x90>
     dde:	91 50       	subi	r25, 0x01	; 1
     de0:	50 40       	sbci	r21, 0x00	; 0
     de2:	e6 95       	lsr	r30
     de4:	00 1c       	adc	r0, r0
     de6:	ca f7       	brpl	.-14     	; 0xdda <__divsf3_pse+0x2c>
     de8:	29 d0       	rcall	.+82     	; 0xe3c <__divsf3_pse+0x8e>
     dea:	fe 2f       	mov	r31, r30
     dec:	27 d0       	rcall	.+78     	; 0xe3c <__divsf3_pse+0x8e>
     dee:	66 0f       	add	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	88 1f       	adc	r24, r24
     df4:	bb 1f       	adc	r27, r27
     df6:	26 17       	cp	r18, r22
     df8:	37 07       	cpc	r19, r23
     dfa:	48 07       	cpc	r20, r24
     dfc:	ab 07       	cpc	r26, r27
     dfe:	b0 e8       	ldi	r27, 0x80	; 128
     e00:	09 f0       	breq	.+2      	; 0xe04 <__divsf3_pse+0x56>
     e02:	bb 0b       	sbc	r27, r27
     e04:	80 2d       	mov	r24, r0
     e06:	bf 01       	movw	r22, r30
     e08:	ff 27       	eor	r31, r31
     e0a:	93 58       	subi	r25, 0x83	; 131
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	2a f0       	brmi	.+10     	; 0xe1a <__divsf3_pse+0x6c>
     e10:	9e 3f       	cpi	r25, 0xFE	; 254
     e12:	51 05       	cpc	r21, r1
     e14:	68 f0       	brcs	.+26     	; 0xe30 <__divsf3_pse+0x82>
     e16:	b6 c0       	rjmp	.+364    	; 0xf84 <__fp_inf>
     e18:	00 c1       	rjmp	.+512    	; 0x101a <__fp_szero>
     e1a:	5f 3f       	cpi	r21, 0xFF	; 255
     e1c:	ec f3       	brlt	.-6      	; 0xe18 <__divsf3_pse+0x6a>
     e1e:	98 3e       	cpi	r25, 0xE8	; 232
     e20:	dc f3       	brlt	.-10     	; 0xe18 <__divsf3_pse+0x6a>
     e22:	86 95       	lsr	r24
     e24:	77 95       	ror	r23
     e26:	67 95       	ror	r22
     e28:	b7 95       	ror	r27
     e2a:	f7 95       	ror	r31
     e2c:	9f 5f       	subi	r25, 0xFF	; 255
     e2e:	c9 f7       	brne	.-14     	; 0xe22 <__divsf3_pse+0x74>
     e30:	88 0f       	add	r24, r24
     e32:	91 1d       	adc	r25, r1
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	97 f9       	bld	r25, 7
     e3a:	08 95       	ret
     e3c:	e1 e0       	ldi	r30, 0x01	; 1
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	bb 1f       	adc	r27, r27
     e46:	62 17       	cp	r22, r18
     e48:	73 07       	cpc	r23, r19
     e4a:	84 07       	cpc	r24, r20
     e4c:	ba 07       	cpc	r27, r26
     e4e:	20 f0       	brcs	.+8      	; 0xe58 <__divsf3_pse+0xaa>
     e50:	62 1b       	sub	r22, r18
     e52:	73 0b       	sbc	r23, r19
     e54:	84 0b       	sbc	r24, r20
     e56:	ba 0b       	sbc	r27, r26
     e58:	ee 1f       	adc	r30, r30
     e5a:	88 f7       	brcc	.-30     	; 0xe3e <__divsf3_pse+0x90>
     e5c:	e0 95       	com	r30
     e5e:	08 95       	ret

00000e60 <__fixsfsi>:
     e60:	04 d0       	rcall	.+8      	; 0xe6a <__fixunssfsi>
     e62:	68 94       	set
     e64:	b1 11       	cpse	r27, r1
     e66:	d9 c0       	rjmp	.+434    	; 0x101a <__fp_szero>
     e68:	08 95       	ret

00000e6a <__fixunssfsi>:
     e6a:	bc d0       	rcall	.+376    	; 0xfe4 <__fp_splitA>
     e6c:	88 f0       	brcs	.+34     	; 0xe90 <__fixunssfsi+0x26>
     e6e:	9f 57       	subi	r25, 0x7F	; 127
     e70:	90 f0       	brcs	.+36     	; 0xe96 <__fixunssfsi+0x2c>
     e72:	b9 2f       	mov	r27, r25
     e74:	99 27       	eor	r25, r25
     e76:	b7 51       	subi	r27, 0x17	; 23
     e78:	a0 f0       	brcs	.+40     	; 0xea2 <__fixunssfsi+0x38>
     e7a:	d1 f0       	breq	.+52     	; 0xeb0 <__fixunssfsi+0x46>
     e7c:	66 0f       	add	r22, r22
     e7e:	77 1f       	adc	r23, r23
     e80:	88 1f       	adc	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	1a f0       	brmi	.+6      	; 0xe8c <__fixunssfsi+0x22>
     e86:	ba 95       	dec	r27
     e88:	c9 f7       	brne	.-14     	; 0xe7c <__fixunssfsi+0x12>
     e8a:	12 c0       	rjmp	.+36     	; 0xeb0 <__fixunssfsi+0x46>
     e8c:	b1 30       	cpi	r27, 0x01	; 1
     e8e:	81 f0       	breq	.+32     	; 0xeb0 <__fixunssfsi+0x46>
     e90:	c3 d0       	rcall	.+390    	; 0x1018 <__fp_zero>
     e92:	b1 e0       	ldi	r27, 0x01	; 1
     e94:	08 95       	ret
     e96:	c0 c0       	rjmp	.+384    	; 0x1018 <__fp_zero>
     e98:	67 2f       	mov	r22, r23
     e9a:	78 2f       	mov	r23, r24
     e9c:	88 27       	eor	r24, r24
     e9e:	b8 5f       	subi	r27, 0xF8	; 248
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <__fixunssfsi+0x46>
     ea2:	b9 3f       	cpi	r27, 0xF9	; 249
     ea4:	cc f3       	brlt	.-14     	; 0xe98 <__fixunssfsi+0x2e>
     ea6:	86 95       	lsr	r24
     ea8:	77 95       	ror	r23
     eaa:	67 95       	ror	r22
     eac:	b3 95       	inc	r27
     eae:	d9 f7       	brne	.-10     	; 0xea6 <__fixunssfsi+0x3c>
     eb0:	3e f4       	brtc	.+14     	; 0xec0 <__fixunssfsi+0x56>
     eb2:	90 95       	com	r25
     eb4:	80 95       	com	r24
     eb6:	70 95       	com	r23
     eb8:	61 95       	neg	r22
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
     ebc:	8f 4f       	sbci	r24, 0xFF	; 255
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	08 95       	ret

00000ec2 <__floatunsisf>:
     ec2:	e8 94       	clt
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <__floatsisf+0x12>

00000ec6 <__floatsisf>:
     ec6:	97 fb       	bst	r25, 7
     ec8:	3e f4       	brtc	.+14     	; 0xed8 <__floatsisf+0x12>
     eca:	90 95       	com	r25
     ecc:	80 95       	com	r24
     ece:	70 95       	com	r23
     ed0:	61 95       	neg	r22
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	8f 4f       	sbci	r24, 0xFF	; 255
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	99 23       	and	r25, r25
     eda:	a9 f0       	breq	.+42     	; 0xf06 <__floatsisf+0x40>
     edc:	f9 2f       	mov	r31, r25
     ede:	96 e9       	ldi	r25, 0x96	; 150
     ee0:	bb 27       	eor	r27, r27
     ee2:	93 95       	inc	r25
     ee4:	f6 95       	lsr	r31
     ee6:	87 95       	ror	r24
     ee8:	77 95       	ror	r23
     eea:	67 95       	ror	r22
     eec:	b7 95       	ror	r27
     eee:	f1 11       	cpse	r31, r1
     ef0:	f8 cf       	rjmp	.-16     	; 0xee2 <__floatsisf+0x1c>
     ef2:	fa f4       	brpl	.+62     	; 0xf32 <__floatsisf+0x6c>
     ef4:	bb 0f       	add	r27, r27
     ef6:	11 f4       	brne	.+4      	; 0xefc <__floatsisf+0x36>
     ef8:	60 ff       	sbrs	r22, 0
     efa:	1b c0       	rjmp	.+54     	; 0xf32 <__floatsisf+0x6c>
     efc:	6f 5f       	subi	r22, 0xFF	; 255
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	8f 4f       	sbci	r24, 0xFF	; 255
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	16 c0       	rjmp	.+44     	; 0xf32 <__floatsisf+0x6c>
     f06:	88 23       	and	r24, r24
     f08:	11 f0       	breq	.+4      	; 0xf0e <__floatsisf+0x48>
     f0a:	96 e9       	ldi	r25, 0x96	; 150
     f0c:	11 c0       	rjmp	.+34     	; 0xf30 <__floatsisf+0x6a>
     f0e:	77 23       	and	r23, r23
     f10:	21 f0       	breq	.+8      	; 0xf1a <__floatsisf+0x54>
     f12:	9e e8       	ldi	r25, 0x8E	; 142
     f14:	87 2f       	mov	r24, r23
     f16:	76 2f       	mov	r23, r22
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <__floatsisf+0x5e>
     f1a:	66 23       	and	r22, r22
     f1c:	71 f0       	breq	.+28     	; 0xf3a <__floatsisf+0x74>
     f1e:	96 e8       	ldi	r25, 0x86	; 134
     f20:	86 2f       	mov	r24, r22
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	2a f0       	brmi	.+10     	; 0xf32 <__floatsisf+0x6c>
     f28:	9a 95       	dec	r25
     f2a:	66 0f       	add	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	88 1f       	adc	r24, r24
     f30:	da f7       	brpl	.-10     	; 0xf28 <__floatsisf+0x62>
     f32:	88 0f       	add	r24, r24
     f34:	96 95       	lsr	r25
     f36:	87 95       	ror	r24
     f38:	97 f9       	bld	r25, 7
     f3a:	08 95       	ret

00000f3c <__fp_cmp>:
     f3c:	99 0f       	add	r25, r25
     f3e:	00 08       	sbc	r0, r0
     f40:	55 0f       	add	r21, r21
     f42:	aa 0b       	sbc	r26, r26
     f44:	e0 e8       	ldi	r30, 0x80	; 128
     f46:	fe ef       	ldi	r31, 0xFE	; 254
     f48:	16 16       	cp	r1, r22
     f4a:	17 06       	cpc	r1, r23
     f4c:	e8 07       	cpc	r30, r24
     f4e:	f9 07       	cpc	r31, r25
     f50:	c0 f0       	brcs	.+48     	; 0xf82 <__fp_cmp+0x46>
     f52:	12 16       	cp	r1, r18
     f54:	13 06       	cpc	r1, r19
     f56:	e4 07       	cpc	r30, r20
     f58:	f5 07       	cpc	r31, r21
     f5a:	98 f0       	brcs	.+38     	; 0xf82 <__fp_cmp+0x46>
     f5c:	62 1b       	sub	r22, r18
     f5e:	73 0b       	sbc	r23, r19
     f60:	84 0b       	sbc	r24, r20
     f62:	95 0b       	sbc	r25, r21
     f64:	39 f4       	brne	.+14     	; 0xf74 <__fp_cmp+0x38>
     f66:	0a 26       	eor	r0, r26
     f68:	61 f0       	breq	.+24     	; 0xf82 <__fp_cmp+0x46>
     f6a:	23 2b       	or	r18, r19
     f6c:	24 2b       	or	r18, r20
     f6e:	25 2b       	or	r18, r21
     f70:	21 f4       	brne	.+8      	; 0xf7a <__fp_cmp+0x3e>
     f72:	08 95       	ret
     f74:	0a 26       	eor	r0, r26
     f76:	09 f4       	brne	.+2      	; 0xf7a <__fp_cmp+0x3e>
     f78:	a1 40       	sbci	r26, 0x01	; 1
     f7a:	a6 95       	lsr	r26
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	81 1d       	adc	r24, r1
     f80:	81 1d       	adc	r24, r1
     f82:	08 95       	ret

00000f84 <__fp_inf>:
     f84:	97 f9       	bld	r25, 7
     f86:	9f 67       	ori	r25, 0x7F	; 127
     f88:	80 e8       	ldi	r24, 0x80	; 128
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	08 95       	ret

00000f90 <__fp_nan>:
     f90:	9f ef       	ldi	r25, 0xFF	; 255
     f92:	80 ec       	ldi	r24, 0xC0	; 192
     f94:	08 95       	ret

00000f96 <__fp_pscA>:
     f96:	00 24       	eor	r0, r0
     f98:	0a 94       	dec	r0
     f9a:	16 16       	cp	r1, r22
     f9c:	17 06       	cpc	r1, r23
     f9e:	18 06       	cpc	r1, r24
     fa0:	09 06       	cpc	r0, r25
     fa2:	08 95       	ret

00000fa4 <__fp_pscB>:
     fa4:	00 24       	eor	r0, r0
     fa6:	0a 94       	dec	r0
     fa8:	12 16       	cp	r1, r18
     faa:	13 06       	cpc	r1, r19
     fac:	14 06       	cpc	r1, r20
     fae:	05 06       	cpc	r0, r21
     fb0:	08 95       	ret

00000fb2 <__fp_round>:
     fb2:	09 2e       	mov	r0, r25
     fb4:	03 94       	inc	r0
     fb6:	00 0c       	add	r0, r0
     fb8:	11 f4       	brne	.+4      	; 0xfbe <__fp_round+0xc>
     fba:	88 23       	and	r24, r24
     fbc:	52 f0       	brmi	.+20     	; 0xfd2 <__fp_round+0x20>
     fbe:	bb 0f       	add	r27, r27
     fc0:	40 f4       	brcc	.+16     	; 0xfd2 <__fp_round+0x20>
     fc2:	bf 2b       	or	r27, r31
     fc4:	11 f4       	brne	.+4      	; 0xfca <__fp_round+0x18>
     fc6:	60 ff       	sbrs	r22, 0
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <__fp_round+0x20>
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	8f 4f       	sbci	r24, 0xFF	; 255
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	08 95       	ret

00000fd4 <__fp_split3>:
     fd4:	57 fd       	sbrc	r21, 7
     fd6:	90 58       	subi	r25, 0x80	; 128
     fd8:	44 0f       	add	r20, r20
     fda:	55 1f       	adc	r21, r21
     fdc:	59 f0       	breq	.+22     	; 0xff4 <__fp_splitA+0x10>
     fde:	5f 3f       	cpi	r21, 0xFF	; 255
     fe0:	71 f0       	breq	.+28     	; 0xffe <__fp_splitA+0x1a>
     fe2:	47 95       	ror	r20

00000fe4 <__fp_splitA>:
     fe4:	88 0f       	add	r24, r24
     fe6:	97 fb       	bst	r25, 7
     fe8:	99 1f       	adc	r25, r25
     fea:	61 f0       	breq	.+24     	; 0x1004 <__fp_splitA+0x20>
     fec:	9f 3f       	cpi	r25, 0xFF	; 255
     fee:	79 f0       	breq	.+30     	; 0x100e <__fp_splitA+0x2a>
     ff0:	87 95       	ror	r24
     ff2:	08 95       	ret
     ff4:	12 16       	cp	r1, r18
     ff6:	13 06       	cpc	r1, r19
     ff8:	14 06       	cpc	r1, r20
     ffa:	55 1f       	adc	r21, r21
     ffc:	f2 cf       	rjmp	.-28     	; 0xfe2 <__fp_split3+0xe>
     ffe:	46 95       	lsr	r20
    1000:	f1 df       	rcall	.-30     	; 0xfe4 <__fp_splitA>
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <__fp_splitA+0x30>
    1004:	16 16       	cp	r1, r22
    1006:	17 06       	cpc	r1, r23
    1008:	18 06       	cpc	r1, r24
    100a:	99 1f       	adc	r25, r25
    100c:	f1 cf       	rjmp	.-30     	; 0xff0 <__fp_splitA+0xc>
    100e:	86 95       	lsr	r24
    1010:	71 05       	cpc	r23, r1
    1012:	61 05       	cpc	r22, r1
    1014:	08 94       	sec
    1016:	08 95       	ret

00001018 <__fp_zero>:
    1018:	e8 94       	clt

0000101a <__fp_szero>:
    101a:	bb 27       	eor	r27, r27
    101c:	66 27       	eor	r22, r22
    101e:	77 27       	eor	r23, r23
    1020:	cb 01       	movw	r24, r22
    1022:	97 f9       	bld	r25, 7
    1024:	08 95       	ret

00001026 <__gesf2>:
    1026:	8a df       	rcall	.-236    	; 0xf3c <__fp_cmp>
    1028:	08 f4       	brcc	.+2      	; 0x102c <__gesf2+0x6>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__mulsf3>:
    102e:	0b d0       	rcall	.+22     	; 0x1046 <__mulsf3x>
    1030:	c0 cf       	rjmp	.-128    	; 0xfb2 <__fp_round>
    1032:	b1 df       	rcall	.-158    	; 0xf96 <__fp_pscA>
    1034:	28 f0       	brcs	.+10     	; 0x1040 <__mulsf3+0x12>
    1036:	b6 df       	rcall	.-148    	; 0xfa4 <__fp_pscB>
    1038:	18 f0       	brcs	.+6      	; 0x1040 <__mulsf3+0x12>
    103a:	95 23       	and	r25, r21
    103c:	09 f0       	breq	.+2      	; 0x1040 <__mulsf3+0x12>
    103e:	a2 cf       	rjmp	.-188    	; 0xf84 <__fp_inf>
    1040:	a7 cf       	rjmp	.-178    	; 0xf90 <__fp_nan>
    1042:	11 24       	eor	r1, r1
    1044:	ea cf       	rjmp	.-44     	; 0x101a <__fp_szero>

00001046 <__mulsf3x>:
    1046:	c6 df       	rcall	.-116    	; 0xfd4 <__fp_split3>
    1048:	a0 f3       	brcs	.-24     	; 0x1032 <__mulsf3+0x4>

0000104a <__mulsf3_pse>:
    104a:	95 9f       	mul	r25, r21
    104c:	d1 f3       	breq	.-12     	; 0x1042 <__mulsf3+0x14>
    104e:	95 0f       	add	r25, r21
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	55 1f       	adc	r21, r21
    1054:	62 9f       	mul	r22, r18
    1056:	f0 01       	movw	r30, r0
    1058:	72 9f       	mul	r23, r18
    105a:	bb 27       	eor	r27, r27
    105c:	f0 0d       	add	r31, r0
    105e:	b1 1d       	adc	r27, r1
    1060:	63 9f       	mul	r22, r19
    1062:	aa 27       	eor	r26, r26
    1064:	f0 0d       	add	r31, r0
    1066:	b1 1d       	adc	r27, r1
    1068:	aa 1f       	adc	r26, r26
    106a:	64 9f       	mul	r22, r20
    106c:	66 27       	eor	r22, r22
    106e:	b0 0d       	add	r27, r0
    1070:	a1 1d       	adc	r26, r1
    1072:	66 1f       	adc	r22, r22
    1074:	82 9f       	mul	r24, r18
    1076:	22 27       	eor	r18, r18
    1078:	b0 0d       	add	r27, r0
    107a:	a1 1d       	adc	r26, r1
    107c:	62 1f       	adc	r22, r18
    107e:	73 9f       	mul	r23, r19
    1080:	b0 0d       	add	r27, r0
    1082:	a1 1d       	adc	r26, r1
    1084:	62 1f       	adc	r22, r18
    1086:	83 9f       	mul	r24, r19
    1088:	a0 0d       	add	r26, r0
    108a:	61 1d       	adc	r22, r1
    108c:	22 1f       	adc	r18, r18
    108e:	74 9f       	mul	r23, r20
    1090:	33 27       	eor	r19, r19
    1092:	a0 0d       	add	r26, r0
    1094:	61 1d       	adc	r22, r1
    1096:	23 1f       	adc	r18, r19
    1098:	84 9f       	mul	r24, r20
    109a:	60 0d       	add	r22, r0
    109c:	21 1d       	adc	r18, r1
    109e:	82 2f       	mov	r24, r18
    10a0:	76 2f       	mov	r23, r22
    10a2:	6a 2f       	mov	r22, r26
    10a4:	11 24       	eor	r1, r1
    10a6:	9f 57       	subi	r25, 0x7F	; 127
    10a8:	50 40       	sbci	r21, 0x00	; 0
    10aa:	8a f0       	brmi	.+34     	; 0x10ce <__mulsf3_pse+0x84>
    10ac:	e1 f0       	breq	.+56     	; 0x10e6 <__mulsf3_pse+0x9c>
    10ae:	88 23       	and	r24, r24
    10b0:	4a f0       	brmi	.+18     	; 0x10c4 <__mulsf3_pse+0x7a>
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	bb 1f       	adc	r27, r27
    10b8:	66 1f       	adc	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	91 50       	subi	r25, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	a9 f7       	brne	.-22     	; 0x10ae <__mulsf3_pse+0x64>
    10c4:	9e 3f       	cpi	r25, 0xFE	; 254
    10c6:	51 05       	cpc	r21, r1
    10c8:	70 f0       	brcs	.+28     	; 0x10e6 <__mulsf3_pse+0x9c>
    10ca:	5c cf       	rjmp	.-328    	; 0xf84 <__fp_inf>
    10cc:	a6 cf       	rjmp	.-180    	; 0x101a <__fp_szero>
    10ce:	5f 3f       	cpi	r21, 0xFF	; 255
    10d0:	ec f3       	brlt	.-6      	; 0x10cc <__mulsf3_pse+0x82>
    10d2:	98 3e       	cpi	r25, 0xE8	; 232
    10d4:	dc f3       	brlt	.-10     	; 0x10cc <__mulsf3_pse+0x82>
    10d6:	86 95       	lsr	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f7 95       	ror	r31
    10e0:	e7 95       	ror	r30
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	c1 f7       	brne	.-16     	; 0x10d6 <__mulsf3_pse+0x8c>
    10e6:	fe 2b       	or	r31, r30
    10e8:	88 0f       	add	r24, r24
    10ea:	91 1d       	adc	r25, r1
    10ec:	96 95       	lsr	r25
    10ee:	87 95       	ror	r24
    10f0:	97 f9       	bld	r25, 7
    10f2:	08 95       	ret

000010f4 <memset>:
    10f4:	dc 01       	movw	r26, r24
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <memset+0x6>
    10f8:	6d 93       	st	X+, r22
    10fa:	41 50       	subi	r20, 0x01	; 1
    10fc:	50 40       	sbci	r21, 0x00	; 0
    10fe:	e0 f7       	brcc	.-8      	; 0x10f8 <memset+0x4>
    1100:	08 95       	ret

00001102 <__eerd_block_m1284>:
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22

00001106 <__eerd_blraw_m1284>:
    1106:	fc 01       	movw	r30, r24
    1108:	f9 99       	sbic	0x1f, 1	; 31
    110a:	fe cf       	rjmp	.-4      	; 0x1108 <__eerd_blraw_m1284+0x2>
    110c:	06 c0       	rjmp	.+12     	; 0x111a <__eerd_blraw_m1284+0x14>
    110e:	f2 bd       	out	0x22, r31	; 34
    1110:	e1 bd       	out	0x21, r30	; 33
    1112:	f8 9a       	sbi	0x1f, 0	; 31
    1114:	31 96       	adiw	r30, 0x01	; 1
    1116:	00 b4       	in	r0, 0x20	; 32
    1118:	0d 92       	st	X+, r0
    111a:	41 50       	subi	r20, 0x01	; 1
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	b8 f7       	brcc	.-18     	; 0x110e <__eerd_blraw_m1284+0x8>
    1120:	08 95       	ret

00001122 <__eeupd_block_m1284>:
    1122:	dc 01       	movw	r26, r24
    1124:	a4 0f       	add	r26, r20
    1126:	b5 1f       	adc	r27, r21
    1128:	41 50       	subi	r20, 0x01	; 1
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	40 f0       	brcs	.+16     	; 0x113e <__eeupd_block_m1284+0x1c>
    112e:	cb 01       	movw	r24, r22
    1130:	84 0f       	add	r24, r20
    1132:	95 1f       	adc	r25, r21
    1134:	2e 91       	ld	r18, -X
    1136:	05 d0       	rcall	.+10     	; 0x1142 <__eeupd_r18_m1284>
    1138:	41 50       	subi	r20, 0x01	; 1
    113a:	50 40       	sbci	r21, 0x00	; 0
    113c:	d8 f7       	brcc	.-10     	; 0x1134 <__eeupd_block_m1284+0x12>
    113e:	08 95       	ret

00001140 <__eeupd_byte_m1284>:
    1140:	26 2f       	mov	r18, r22

00001142 <__eeupd_r18_m1284>:
    1142:	f9 99       	sbic	0x1f, 1	; 31
    1144:	fe cf       	rjmp	.-4      	; 0x1142 <__eeupd_r18_m1284>
    1146:	92 bd       	out	0x22, r25	; 34
    1148:	81 bd       	out	0x21, r24	; 33
    114a:	f8 9a       	sbi	0x1f, 0	; 31
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	00 b4       	in	r0, 0x20	; 32
    1150:	02 16       	cp	r0, r18
    1152:	39 f0       	breq	.+14     	; 0x1162 <__eeupd_r18_m1284+0x20>
    1154:	1f ba       	out	0x1f, r1	; 31
    1156:	20 bd       	out	0x20, r18	; 32
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	fa 9a       	sbi	0x1f, 2	; 31
    115e:	f9 9a       	sbi	0x1f, 1	; 31
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	08 95       	ret

00001164 <_exit>:
    1164:	f8 94       	cli

00001166 <__stop_program>:
    1166:	ff cf       	rjmp	.-2      	; 0x1166 <__stop_program>
